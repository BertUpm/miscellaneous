
EM406A_Parser.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  00000e5e  00000ef2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e5e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e5  00800134  00800134  00000f26  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000f28  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  000015f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  00001679  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000256  00000000  00000000  000016f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000c4d  00000000  00000000  0000194f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000531  00000000  00000000  0000259c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000d0f  00000000  00000000  00002acd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000220  00000000  00000000  000037dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000034a  00000000  00000000  000039fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 000000e5  00000000  00000000  00003d46  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 12 03 	jmp	0x624	; 0x624 <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 7f 03 	jmp	0x6fe	; 0x6fe <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 c9 04 	jmp	0x992	; 0x992 <__vector_18>
  4c:	0c 94 29 05 	jmp	0xa52	; 0xa52 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e5       	ldi	r30, 0x5E	; 94
  7c:	fe e0       	ldi	r31, 0x0E	; 14
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 33       	cpi	r26, 0x34	; 52
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	12 e0       	ldi	r17, 0x02	; 2
  8c:	a4 e3       	ldi	r26, 0x34	; 52
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 31       	cpi	r26, 0x19	; 25
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 2d 07 	jmp	0xe5a	; 0xe5a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
uint8_t IsEqual(uint8_t *o, uint8_t *n);

/*
 * @brief main function
 */
int main() {
  a6:	df 93       	push	r29
  a8:	cf 93       	push	r28
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	c4 56       	subi	r28, 0x64	; 100
  b0:	d0 40       	sbci	r29, 0x00	; 0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	f8 94       	cli
  b6:	de bf       	out	0x3e, r29	; 62
  b8:	0f be       	out	0x3f, r0	; 63
  ba:	cd bf       	out	0x3d, r28	; 61

	// call the init function
	init();
  bc:	0e 94 a0 00 	call	0x140	; 0x140 <init>
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <main+0x1e>
				tx_rmc();
			}
			rmc_old = rmc_new;
			sys.flag.RMC_RxDone = 0;
		}
	}
  c2:	00 00       	nop
	rmc_s rmc_old;

	// main loop
	for(;;) {
		// data from the EM406A received?
		if(sys.flag.SoftUART_Rx) {
  c4:	80 91 18 02 	lds	r24, 0x0218
  c8:	82 70       	andi	r24, 0x02	; 2
  ca:	88 23       	and	r24, r24
  cc:	71 f0       	breq	.+28     	; 0xea <main+0x44>
			while(!SoftUART_RxBufferEmpty()) {
  ce:	04 c0       	rjmp	.+8      	; 0xd8 <main+0x32>
				parse_data(SoftUART_GetByte());
  d0:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <SoftUART_GetByte>
  d4:	0e 94 04 06 	call	0xc08	; 0xc08 <parse_data>

	// main loop
	for(;;) {
		// data from the EM406A received?
		if(sys.flag.SoftUART_Rx) {
			while(!SoftUART_RxBufferEmpty()) {
  d8:	0e 94 04 03 	call	0x608	; 0x608 <SoftUART_RxBufferEmpty>
  dc:	88 23       	and	r24, r24
  de:	c1 f3       	breq	.-16     	; 0xd0 <main+0x2a>
				parse_data(SoftUART_GetByte());
			}
			sys.flag.SoftUART_Rx = 0;
  e0:	80 91 18 02 	lds	r24, 0x0218
  e4:	8d 7f       	andi	r24, 0xFD	; 253
  e6:	80 93 18 02 	sts	0x0218, r24
		}
		// rmc data parsed?
		if(sys.flag.RMC_RxDone) {
  ea:	80 91 18 02 	lds	r24, 0x0218
  ee:	84 70       	andi	r24, 0x04	; 4
  f0:	88 23       	and	r24, r24
  f2:	39 f3       	breq	.-50     	; 0xc2 <main+0x1c>
			rmc_s rmc_new;
			get_RMC_Data(&rmc_new);
  f4:	ce 01       	movw	r24, r28
  f6:	c3 96       	adiw	r24, 0x33	; 51
  f8:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <get_RMC_Data>
			if(!IsEqual(rmc_old.utc_time, rmc_new.utc_time)) { 
  fc:	9e 01       	movw	r18, r28
  fe:	2d 5c       	subi	r18, 0xCD	; 205
 100:	3f 4f       	sbci	r19, 0xFF	; 255
 102:	ce 01       	movw	r24, r28
 104:	01 96       	adiw	r24, 0x01	; 1
 106:	b9 01       	movw	r22, r18
 108:	0e 94 87 02 	call	0x50e	; 0x50e <IsEqual>
 10c:	88 23       	and	r24, r24
 10e:	11 f4       	brne	.+4      	; 0x114 <main+0x6e>
				tx_rmc();
 110:	0e 94 af 00 	call	0x15e	; 0x15e <tx_rmc>
			}
			rmc_old = rmc_new;
 114:	ce 01       	movw	r24, r28
 116:	01 96       	adiw	r24, 0x01	; 1
 118:	9e 01       	movw	r18, r28
 11a:	2d 5c       	subi	r18, 0xCD	; 205
 11c:	3f 4f       	sbci	r19, 0xFF	; 255
 11e:	42 e3       	ldi	r20, 0x32	; 50
 120:	f9 01       	movw	r30, r18
 122:	00 80       	ld	r0, Z
 124:	2f 5f       	subi	r18, 0xFF	; 255
 126:	3f 4f       	sbci	r19, 0xFF	; 255
 128:	fc 01       	movw	r30, r24
 12a:	00 82       	st	Z, r0
 12c:	01 96       	adiw	r24, 0x01	; 1
 12e:	41 50       	subi	r20, 0x01	; 1
 130:	44 23       	and	r20, r20
 132:	b1 f7       	brne	.-20     	; 0x120 <main+0x7a>
			sys.flag.RMC_RxDone = 0;
 134:	80 91 18 02 	lds	r24, 0x0218
 138:	8b 7f       	andi	r24, 0xFB	; 251
 13a:	80 93 18 02 	sts	0x0218, r24
		}
	}
 13e:	c2 cf       	rjmp	.-124    	; 0xc4 <main+0x1e>

00000140 <init>:
}

/*
 * @brief init function for the uC
 */
void init() {
 140:	df 93       	push	r29
 142:	cf 93       	push	r28
 144:	cd b7       	in	r28, 0x3d	; 61
 146:	de b7       	in	r29, 0x3e	; 62
	
	sys.all_flags = 0;
 148:	10 92 18 02 	sts	0x0218, r1

	UART_Init(BAUD115200);
 14c:	80 e1       	ldi	r24, 0x10	; 16
 14e:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <UART_Init>

	SoftUART_Init();
 152:	0e 94 b9 02 	call	0x572	; 0x572 <SoftUART_Init>

	sei();
 156:	78 94       	sei

}
 158:	cf 91       	pop	r28
 15a:	df 91       	pop	r29
 15c:	08 95       	ret

0000015e <tx_rmc>:

/*
 * @brief transmit rmc data via serial
 */
void tx_rmc() {
 15e:	df 93       	push	r29
 160:	cf 93       	push	r28
 162:	cd b7       	in	r28, 0x3d	; 61
 164:	de b7       	in	r29, 0x3e	; 62
 166:	c7 58       	subi	r28, 0x87	; 135
 168:	d0 40       	sbci	r29, 0x00	; 0
 16a:	0f b6       	in	r0, 0x3f	; 63
 16c:	f8 94       	cli
 16e:	de bf       	out	0x3e, r29	; 62
 170:	0f be       	out	0x3f, r0	; 63
 172:	cd bf       	out	0x3d, r28	; 61
	uint8_t const title[] = {'R', 'M', 'C', ' ', 'M', 'e', 's', 's', 'a', 'g', 'e', '\n'}; // 12
 174:	ce 01       	movw	r24, r28
 176:	02 96       	adiw	r24, 0x02	; 2
 178:	20 e0       	ldi	r18, 0x00	; 0
 17a:	31 e0       	ldi	r19, 0x01	; 1
 17c:	4c e0       	ldi	r20, 0x0C	; 12
 17e:	f9 01       	movw	r30, r18
 180:	00 80       	ld	r0, Z
 182:	2f 5f       	subi	r18, 0xFF	; 255
 184:	3f 4f       	sbci	r19, 0xFF	; 255
 186:	fc 01       	movw	r30, r24
 188:	00 82       	st	Z, r0
 18a:	01 96       	adiw	r24, 0x01	; 1
 18c:	41 50       	subi	r20, 0x01	; 1
 18e:	44 23       	and	r20, r20
 190:	b1 f7       	brne	.-20     	; 0x17e <tx_rmc+0x20>
	uint8_t const utc[] =   {'U', 'T', 'C', ' ', 'T', 'i', 'm', 'e', ':', ' '}; // 10
 192:	ce 01       	movw	r24, r28
 194:	0e 96       	adiw	r24, 0x0e	; 14
 196:	2c e0       	ldi	r18, 0x0C	; 12
 198:	31 e0       	ldi	r19, 0x01	; 1
 19a:	4a e0       	ldi	r20, 0x0A	; 10
 19c:	f9 01       	movw	r30, r18
 19e:	00 80       	ld	r0, Z
 1a0:	2f 5f       	subi	r18, 0xFF	; 255
 1a2:	3f 4f       	sbci	r19, 0xFF	; 255
 1a4:	fc 01       	movw	r30, r24
 1a6:	00 82       	st	Z, r0
 1a8:	01 96       	adiw	r24, 0x01	; 1
 1aa:	41 50       	subi	r20, 0x01	; 1
 1ac:	44 23       	and	r20, r20
 1ae:	b1 f7       	brne	.-20     	; 0x19c <tx_rmc+0x3e>
	uint8_t const stat[] =  {'S', 't', 'a', 't', 'u', 's', ' ', ' ', ':', ' '}; // 10
 1b0:	ce 01       	movw	r24, r28
 1b2:	48 96       	adiw	r24, 0x18	; 24
 1b4:	26 e1       	ldi	r18, 0x16	; 22
 1b6:	31 e0       	ldi	r19, 0x01	; 1
 1b8:	4a e0       	ldi	r20, 0x0A	; 10
 1ba:	f9 01       	movw	r30, r18
 1bc:	00 80       	ld	r0, Z
 1be:	2f 5f       	subi	r18, 0xFF	; 255
 1c0:	3f 4f       	sbci	r19, 0xFF	; 255
 1c2:	fc 01       	movw	r30, r24
 1c4:	00 82       	st	Z, r0
 1c6:	01 96       	adiw	r24, 0x01	; 1
 1c8:	41 50       	subi	r20, 0x01	; 1
 1ca:	44 23       	and	r20, r20
 1cc:	b1 f7       	brne	.-20     	; 0x1ba <tx_rmc+0x5c>
	uint8_t const lat[] =   {'L', 'a', 't', 'i', 't', '.', ' ', ' ', ':', ' '}; // 10
 1ce:	ce 01       	movw	r24, r28
 1d0:	82 96       	adiw	r24, 0x22	; 34
 1d2:	20 e2       	ldi	r18, 0x20	; 32
 1d4:	31 e0       	ldi	r19, 0x01	; 1
 1d6:	4a e0       	ldi	r20, 0x0A	; 10
 1d8:	f9 01       	movw	r30, r18
 1da:	00 80       	ld	r0, Z
 1dc:	2f 5f       	subi	r18, 0xFF	; 255
 1de:	3f 4f       	sbci	r19, 0xFF	; 255
 1e0:	fc 01       	movw	r30, r24
 1e2:	00 82       	st	Z, r0
 1e4:	01 96       	adiw	r24, 0x01	; 1
 1e6:	41 50       	subi	r20, 0x01	; 1
 1e8:	44 23       	and	r20, r20
 1ea:	b1 f7       	brne	.-20     	; 0x1d8 <tx_rmc+0x7a>
	uint8_t const longt[] = {'L', 'o', 'n', 'g', 't', '.', ' ', ' ', ':', ' '}; // 10
 1ec:	ce 01       	movw	r24, r28
 1ee:	8c 96       	adiw	r24, 0x2c	; 44
 1f0:	2a e2       	ldi	r18, 0x2A	; 42
 1f2:	31 e0       	ldi	r19, 0x01	; 1
 1f4:	4a e0       	ldi	r20, 0x0A	; 10
 1f6:	f9 01       	movw	r30, r18
 1f8:	00 80       	ld	r0, Z
 1fa:	2f 5f       	subi	r18, 0xFF	; 255
 1fc:	3f 4f       	sbci	r19, 0xFF	; 255
 1fe:	fc 01       	movw	r30, r24
 200:	00 82       	st	Z, r0
 202:	01 96       	adiw	r24, 0x01	; 1
 204:	41 50       	subi	r20, 0x01	; 1
 206:	44 23       	and	r20, r20
 208:	b1 f7       	brne	.-20     	; 0x1f6 <tx_rmc+0x98>
	rmc_s rmc;
	uint8_t message[32];
	uint8_t i;
	get_RMC_Data(&rmc);
 20a:	ce 01       	movw	r24, r28
 20c:	c6 96       	adiw	r24, 0x36	; 54
 20e:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <get_RMC_Data>
	
	for(i=0; i<12; i++) { message[i] = title[i]; }
 212:	19 82       	std	Y+1, r1	; 0x01
 214:	17 c0       	rjmp	.+46     	; 0x244 <tx_rmc+0xe6>
 216:	89 81       	ldd	r24, Y+1	; 0x01
 218:	88 2f       	mov	r24, r24
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	29 81       	ldd	r18, Y+1	; 0x01
 21e:	22 2f       	mov	r18, r18
 220:	30 e0       	ldi	r19, 0x00	; 0
 222:	ae 01       	movw	r20, r28
 224:	4e 5f       	subi	r20, 0xFE	; 254
 226:	5f 4f       	sbci	r21, 0xFF	; 255
 228:	24 0f       	add	r18, r20
 22a:	35 1f       	adc	r19, r21
 22c:	f9 01       	movw	r30, r18
 22e:	40 81       	ld	r20, Z
 230:	9e 01       	movw	r18, r28
 232:	28 59       	subi	r18, 0x98	; 152
 234:	3f 4f       	sbci	r19, 0xFF	; 255
 236:	82 0f       	add	r24, r18
 238:	93 1f       	adc	r25, r19
 23a:	fc 01       	movw	r30, r24
 23c:	40 83       	st	Z, r20
 23e:	89 81       	ldd	r24, Y+1	; 0x01
 240:	8f 5f       	subi	r24, 0xFF	; 255
 242:	89 83       	std	Y+1, r24	; 0x01
 244:	89 81       	ldd	r24, Y+1	; 0x01
 246:	8c 30       	cpi	r24, 0x0C	; 12
 248:	30 f3       	brcs	.-52     	; 0x216 <tx_rmc+0xb8>
	UART_WriteBytes(message, 12);
 24a:	ce 01       	movw	r24, r28
 24c:	88 59       	subi	r24, 0x98	; 152
 24e:	9f 4f       	sbci	r25, 0xFF	; 255
 250:	6c e0       	ldi	r22, 0x0C	; 12
 252:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <UART_WriteBytes>
	while(!UART_TxBufferEmpty()) { }
 256:	00 00       	nop
 258:	0e 94 bb 04 	call	0x976	; 0x976 <UART_TxBufferEmpty>
 25c:	88 23       	and	r24, r24
 25e:	e1 f3       	breq	.-8      	; 0x258 <tx_rmc+0xfa>

	for(i=0; i<10; i++) { message[i] = utc[i]; }
 260:	19 82       	std	Y+1, r1	; 0x01
 262:	17 c0       	rjmp	.+46     	; 0x292 <tx_rmc+0x134>
 264:	89 81       	ldd	r24, Y+1	; 0x01
 266:	88 2f       	mov	r24, r24
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	29 81       	ldd	r18, Y+1	; 0x01
 26c:	22 2f       	mov	r18, r18
 26e:	30 e0       	ldi	r19, 0x00	; 0
 270:	ae 01       	movw	r20, r28
 272:	42 5f       	subi	r20, 0xF2	; 242
 274:	5f 4f       	sbci	r21, 0xFF	; 255
 276:	24 0f       	add	r18, r20
 278:	35 1f       	adc	r19, r21
 27a:	f9 01       	movw	r30, r18
 27c:	40 81       	ld	r20, Z
 27e:	9e 01       	movw	r18, r28
 280:	28 59       	subi	r18, 0x98	; 152
 282:	3f 4f       	sbci	r19, 0xFF	; 255
 284:	82 0f       	add	r24, r18
 286:	93 1f       	adc	r25, r19
 288:	fc 01       	movw	r30, r24
 28a:	40 83       	st	Z, r20
 28c:	89 81       	ldd	r24, Y+1	; 0x01
 28e:	8f 5f       	subi	r24, 0xFF	; 255
 290:	89 83       	std	Y+1, r24	; 0x01
 292:	89 81       	ldd	r24, Y+1	; 0x01
 294:	8a 30       	cpi	r24, 0x0A	; 10
 296:	30 f3       	brcs	.-52     	; 0x264 <tx_rmc+0x106>
	UART_WriteBytes(message, 10);
 298:	ce 01       	movw	r24, r28
 29a:	88 59       	subi	r24, 0x98	; 152
 29c:	9f 4f       	sbci	r25, 0xFF	; 255
 29e:	6a e0       	ldi	r22, 0x0A	; 10
 2a0:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <UART_WriteBytes>
	while(!UART_TxBufferEmpty()) { }
 2a4:	00 00       	nop
 2a6:	0e 94 bb 04 	call	0x976	; 0x976 <UART_TxBufferEmpty>
 2aa:	88 23       	and	r24, r24
 2ac:	e1 f3       	breq	.-8      	; 0x2a6 <tx_rmc+0x148>

	for(i=0; i<10; i++) { message[i] = rmc.utc_time[i]; } message[i] = '\n';
 2ae:	19 82       	std	Y+1, r1	; 0x01
 2b0:	17 c0       	rjmp	.+46     	; 0x2e0 <tx_rmc+0x182>
 2b2:	89 81       	ldd	r24, Y+1	; 0x01
 2b4:	88 2f       	mov	r24, r24
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	29 81       	ldd	r18, Y+1	; 0x01
 2ba:	22 2f       	mov	r18, r18
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	ae 01       	movw	r20, r28
 2c0:	4a 5c       	subi	r20, 0xCA	; 202
 2c2:	5f 4f       	sbci	r21, 0xFF	; 255
 2c4:	24 0f       	add	r18, r20
 2c6:	35 1f       	adc	r19, r21
 2c8:	f9 01       	movw	r30, r18
 2ca:	40 81       	ld	r20, Z
 2cc:	9e 01       	movw	r18, r28
 2ce:	28 59       	subi	r18, 0x98	; 152
 2d0:	3f 4f       	sbci	r19, 0xFF	; 255
 2d2:	82 0f       	add	r24, r18
 2d4:	93 1f       	adc	r25, r19
 2d6:	fc 01       	movw	r30, r24
 2d8:	40 83       	st	Z, r20
 2da:	89 81       	ldd	r24, Y+1	; 0x01
 2dc:	8f 5f       	subi	r24, 0xFF	; 255
 2de:	89 83       	std	Y+1, r24	; 0x01
 2e0:	89 81       	ldd	r24, Y+1	; 0x01
 2e2:	8a 30       	cpi	r24, 0x0A	; 10
 2e4:	30 f3       	brcs	.-52     	; 0x2b2 <tx_rmc+0x154>
 2e6:	89 81       	ldd	r24, Y+1	; 0x01
 2e8:	88 2f       	mov	r24, r24
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	9e 01       	movw	r18, r28
 2ee:	28 59       	subi	r18, 0x98	; 152
 2f0:	3f 4f       	sbci	r19, 0xFF	; 255
 2f2:	82 0f       	add	r24, r18
 2f4:	93 1f       	adc	r25, r19
 2f6:	2a e0       	ldi	r18, 0x0A	; 10
 2f8:	fc 01       	movw	r30, r24
 2fa:	20 83       	st	Z, r18
	UART_WriteBytes(message, 11);
 2fc:	ce 01       	movw	r24, r28
 2fe:	88 59       	subi	r24, 0x98	; 152
 300:	9f 4f       	sbci	r25, 0xFF	; 255
 302:	6b e0       	ldi	r22, 0x0B	; 11
 304:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <UART_WriteBytes>
	while(!UART_TxBufferEmpty()) { }
 308:	00 00       	nop
 30a:	0e 94 bb 04 	call	0x976	; 0x976 <UART_TxBufferEmpty>
 30e:	88 23       	and	r24, r24
 310:	e1 f3       	breq	.-8      	; 0x30a <tx_rmc+0x1ac>

	for(i=0; i<10; i++) { message[i] = stat[i]; }
 312:	19 82       	std	Y+1, r1	; 0x01
 314:	17 c0       	rjmp	.+46     	; 0x344 <tx_rmc+0x1e6>
 316:	89 81       	ldd	r24, Y+1	; 0x01
 318:	88 2f       	mov	r24, r24
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	29 81       	ldd	r18, Y+1	; 0x01
 31e:	22 2f       	mov	r18, r18
 320:	30 e0       	ldi	r19, 0x00	; 0
 322:	ae 01       	movw	r20, r28
 324:	48 5e       	subi	r20, 0xE8	; 232
 326:	5f 4f       	sbci	r21, 0xFF	; 255
 328:	24 0f       	add	r18, r20
 32a:	35 1f       	adc	r19, r21
 32c:	f9 01       	movw	r30, r18
 32e:	40 81       	ld	r20, Z
 330:	9e 01       	movw	r18, r28
 332:	28 59       	subi	r18, 0x98	; 152
 334:	3f 4f       	sbci	r19, 0xFF	; 255
 336:	82 0f       	add	r24, r18
 338:	93 1f       	adc	r25, r19
 33a:	fc 01       	movw	r30, r24
 33c:	40 83       	st	Z, r20
 33e:	89 81       	ldd	r24, Y+1	; 0x01
 340:	8f 5f       	subi	r24, 0xFF	; 255
 342:	89 83       	std	Y+1, r24	; 0x01
 344:	89 81       	ldd	r24, Y+1	; 0x01
 346:	8a 30       	cpi	r24, 0x0A	; 10
 348:	30 f3       	brcs	.-52     	; 0x316 <tx_rmc+0x1b8>
	UART_WriteBytes(message, 10);
 34a:	ce 01       	movw	r24, r28
 34c:	88 59       	subi	r24, 0x98	; 152
 34e:	9f 4f       	sbci	r25, 0xFF	; 255
 350:	6a e0       	ldi	r22, 0x0A	; 10
 352:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <UART_WriteBytes>
	while(!UART_TxBufferEmpty()) { }
 356:	00 00       	nop
 358:	0e 94 bb 04 	call	0x976	; 0x976 <UART_TxBufferEmpty>
 35c:	88 23       	and	r24, r24
 35e:	e1 f3       	breq	.-8      	; 0x358 <tx_rmc+0x1fa>

	message[0] = rmc.status; message[1] = '\n';
 360:	ce 01       	movw	r24, r28
 362:	80 5c       	subi	r24, 0xC0	; 192
 364:	9f 4f       	sbci	r25, 0xFF	; 255
 366:	fc 01       	movw	r30, r24
 368:	20 81       	ld	r18, Z
 36a:	ce 01       	movw	r24, r28
 36c:	88 59       	subi	r24, 0x98	; 152
 36e:	9f 4f       	sbci	r25, 0xFF	; 255
 370:	fc 01       	movw	r30, r24
 372:	20 83       	st	Z, r18
 374:	ce 01       	movw	r24, r28
 376:	88 59       	subi	r24, 0x98	; 152
 378:	9f 4f       	sbci	r25, 0xFF	; 255
 37a:	2a e0       	ldi	r18, 0x0A	; 10
 37c:	fc 01       	movw	r30, r24
 37e:	21 83       	std	Z+1, r18	; 0x01
	UART_WriteBytes(message, 2);
 380:	ce 01       	movw	r24, r28
 382:	88 59       	subi	r24, 0x98	; 152
 384:	9f 4f       	sbci	r25, 0xFF	; 255
 386:	62 e0       	ldi	r22, 0x02	; 2
 388:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <UART_WriteBytes>
	while(!UART_TxBufferEmpty()) { }
 38c:	00 00       	nop
 38e:	0e 94 bb 04 	call	0x976	; 0x976 <UART_TxBufferEmpty>
 392:	88 23       	and	r24, r24
 394:	e1 f3       	breq	.-8      	; 0x38e <tx_rmc+0x230>

	for(i=0; i<10; i++) { message[i] = lat[i]; }
 396:	19 82       	std	Y+1, r1	; 0x01
 398:	17 c0       	rjmp	.+46     	; 0x3c8 <tx_rmc+0x26a>
 39a:	89 81       	ldd	r24, Y+1	; 0x01
 39c:	88 2f       	mov	r24, r24
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	29 81       	ldd	r18, Y+1	; 0x01
 3a2:	22 2f       	mov	r18, r18
 3a4:	30 e0       	ldi	r19, 0x00	; 0
 3a6:	ae 01       	movw	r20, r28
 3a8:	4e 5d       	subi	r20, 0xDE	; 222
 3aa:	5f 4f       	sbci	r21, 0xFF	; 255
 3ac:	24 0f       	add	r18, r20
 3ae:	35 1f       	adc	r19, r21
 3b0:	f9 01       	movw	r30, r18
 3b2:	40 81       	ld	r20, Z
 3b4:	9e 01       	movw	r18, r28
 3b6:	28 59       	subi	r18, 0x98	; 152
 3b8:	3f 4f       	sbci	r19, 0xFF	; 255
 3ba:	82 0f       	add	r24, r18
 3bc:	93 1f       	adc	r25, r19
 3be:	fc 01       	movw	r30, r24
 3c0:	40 83       	st	Z, r20
 3c2:	89 81       	ldd	r24, Y+1	; 0x01
 3c4:	8f 5f       	subi	r24, 0xFF	; 255
 3c6:	89 83       	std	Y+1, r24	; 0x01
 3c8:	89 81       	ldd	r24, Y+1	; 0x01
 3ca:	8a 30       	cpi	r24, 0x0A	; 10
 3cc:	30 f3       	brcs	.-52     	; 0x39a <tx_rmc+0x23c>
	UART_WriteBytes(message, 10);
 3ce:	ce 01       	movw	r24, r28
 3d0:	88 59       	subi	r24, 0x98	; 152
 3d2:	9f 4f       	sbci	r25, 0xFF	; 255
 3d4:	6a e0       	ldi	r22, 0x0A	; 10
 3d6:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <UART_WriteBytes>
	while(!UART_TxBufferEmpty()) { }
 3da:	00 00       	nop
 3dc:	0e 94 bb 04 	call	0x976	; 0x976 <UART_TxBufferEmpty>
 3e0:	88 23       	and	r24, r24
 3e2:	e1 f3       	breq	.-8      	; 0x3dc <tx_rmc+0x27e>

	for(i=0; i<9; i++) { message[i] = rmc.latitude[i]; } message[i] = '\n';
 3e4:	19 82       	std	Y+1, r1	; 0x01
 3e6:	17 c0       	rjmp	.+46     	; 0x416 <tx_rmc+0x2b8>
 3e8:	89 81       	ldd	r24, Y+1	; 0x01
 3ea:	88 2f       	mov	r24, r24
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	29 81       	ldd	r18, Y+1	; 0x01
 3f0:	22 2f       	mov	r18, r18
 3f2:	30 e0       	ldi	r19, 0x00	; 0
 3f4:	ae 01       	movw	r20, r28
 3f6:	4f 5b       	subi	r20, 0xBF	; 191
 3f8:	5f 4f       	sbci	r21, 0xFF	; 255
 3fa:	24 0f       	add	r18, r20
 3fc:	35 1f       	adc	r19, r21
 3fe:	f9 01       	movw	r30, r18
 400:	40 81       	ld	r20, Z
 402:	9e 01       	movw	r18, r28
 404:	28 59       	subi	r18, 0x98	; 152
 406:	3f 4f       	sbci	r19, 0xFF	; 255
 408:	82 0f       	add	r24, r18
 40a:	93 1f       	adc	r25, r19
 40c:	fc 01       	movw	r30, r24
 40e:	40 83       	st	Z, r20
 410:	89 81       	ldd	r24, Y+1	; 0x01
 412:	8f 5f       	subi	r24, 0xFF	; 255
 414:	89 83       	std	Y+1, r24	; 0x01
 416:	89 81       	ldd	r24, Y+1	; 0x01
 418:	89 30       	cpi	r24, 0x09	; 9
 41a:	30 f3       	brcs	.-52     	; 0x3e8 <tx_rmc+0x28a>
 41c:	89 81       	ldd	r24, Y+1	; 0x01
 41e:	88 2f       	mov	r24, r24
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	9e 01       	movw	r18, r28
 424:	28 59       	subi	r18, 0x98	; 152
 426:	3f 4f       	sbci	r19, 0xFF	; 255
 428:	82 0f       	add	r24, r18
 42a:	93 1f       	adc	r25, r19
 42c:	2a e0       	ldi	r18, 0x0A	; 10
 42e:	fc 01       	movw	r30, r24
 430:	20 83       	st	Z, r18
	UART_WriteBytes(message, 10);
 432:	ce 01       	movw	r24, r28
 434:	88 59       	subi	r24, 0x98	; 152
 436:	9f 4f       	sbci	r25, 0xFF	; 255
 438:	6a e0       	ldi	r22, 0x0A	; 10
 43a:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <UART_WriteBytes>
	while(!UART_TxBufferEmpty()) { }
 43e:	00 00       	nop
 440:	0e 94 bb 04 	call	0x976	; 0x976 <UART_TxBufferEmpty>
 444:	88 23       	and	r24, r24
 446:	e1 f3       	breq	.-8      	; 0x440 <tx_rmc+0x2e2>

	for(i=0; i<10; i++) { message[i] = longt[i]; }
 448:	19 82       	std	Y+1, r1	; 0x01
 44a:	17 c0       	rjmp	.+46     	; 0x47a <tx_rmc+0x31c>
 44c:	89 81       	ldd	r24, Y+1	; 0x01
 44e:	88 2f       	mov	r24, r24
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	29 81       	ldd	r18, Y+1	; 0x01
 454:	22 2f       	mov	r18, r18
 456:	30 e0       	ldi	r19, 0x00	; 0
 458:	ae 01       	movw	r20, r28
 45a:	44 5d       	subi	r20, 0xD4	; 212
 45c:	5f 4f       	sbci	r21, 0xFF	; 255
 45e:	24 0f       	add	r18, r20
 460:	35 1f       	adc	r19, r21
 462:	f9 01       	movw	r30, r18
 464:	40 81       	ld	r20, Z
 466:	9e 01       	movw	r18, r28
 468:	28 59       	subi	r18, 0x98	; 152
 46a:	3f 4f       	sbci	r19, 0xFF	; 255
 46c:	82 0f       	add	r24, r18
 46e:	93 1f       	adc	r25, r19
 470:	fc 01       	movw	r30, r24
 472:	40 83       	st	Z, r20
 474:	89 81       	ldd	r24, Y+1	; 0x01
 476:	8f 5f       	subi	r24, 0xFF	; 255
 478:	89 83       	std	Y+1, r24	; 0x01
 47a:	89 81       	ldd	r24, Y+1	; 0x01
 47c:	8a 30       	cpi	r24, 0x0A	; 10
 47e:	30 f3       	brcs	.-52     	; 0x44c <tx_rmc+0x2ee>
	UART_WriteBytes(message, 10);
 480:	ce 01       	movw	r24, r28
 482:	88 59       	subi	r24, 0x98	; 152
 484:	9f 4f       	sbci	r25, 0xFF	; 255
 486:	6a e0       	ldi	r22, 0x0A	; 10
 488:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <UART_WriteBytes>
	while(!UART_TxBufferEmpty()) { }
 48c:	00 00       	nop
 48e:	0e 94 bb 04 	call	0x976	; 0x976 <UART_TxBufferEmpty>
 492:	88 23       	and	r24, r24
 494:	e1 f3       	breq	.-8      	; 0x48e <tx_rmc+0x330>

	for(i=0; i<9; i++) { message[i] = rmc.longitude[i]; } message[i] = '\n';
 496:	19 82       	std	Y+1, r1	; 0x01
 498:	17 c0       	rjmp	.+46     	; 0x4c8 <tx_rmc+0x36a>
 49a:	89 81       	ldd	r24, Y+1	; 0x01
 49c:	88 2f       	mov	r24, r24
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	29 81       	ldd	r18, Y+1	; 0x01
 4a2:	22 2f       	mov	r18, r18
 4a4:	30 e0       	ldi	r19, 0x00	; 0
 4a6:	ae 01       	movw	r20, r28
 4a8:	45 5b       	subi	r20, 0xB5	; 181
 4aa:	5f 4f       	sbci	r21, 0xFF	; 255
 4ac:	24 0f       	add	r18, r20
 4ae:	35 1f       	adc	r19, r21
 4b0:	f9 01       	movw	r30, r18
 4b2:	40 81       	ld	r20, Z
 4b4:	9e 01       	movw	r18, r28
 4b6:	28 59       	subi	r18, 0x98	; 152
 4b8:	3f 4f       	sbci	r19, 0xFF	; 255
 4ba:	82 0f       	add	r24, r18
 4bc:	93 1f       	adc	r25, r19
 4be:	fc 01       	movw	r30, r24
 4c0:	40 83       	st	Z, r20
 4c2:	89 81       	ldd	r24, Y+1	; 0x01
 4c4:	8f 5f       	subi	r24, 0xFF	; 255
 4c6:	89 83       	std	Y+1, r24	; 0x01
 4c8:	89 81       	ldd	r24, Y+1	; 0x01
 4ca:	89 30       	cpi	r24, 0x09	; 9
 4cc:	30 f3       	brcs	.-52     	; 0x49a <tx_rmc+0x33c>
 4ce:	89 81       	ldd	r24, Y+1	; 0x01
 4d0:	88 2f       	mov	r24, r24
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	9e 01       	movw	r18, r28
 4d6:	28 59       	subi	r18, 0x98	; 152
 4d8:	3f 4f       	sbci	r19, 0xFF	; 255
 4da:	82 0f       	add	r24, r18
 4dc:	93 1f       	adc	r25, r19
 4de:	2a e0       	ldi	r18, 0x0A	; 10
 4e0:	fc 01       	movw	r30, r24
 4e2:	20 83       	st	Z, r18
	UART_WriteBytes(message, 10);
 4e4:	ce 01       	movw	r24, r28
 4e6:	88 59       	subi	r24, 0x98	; 152
 4e8:	9f 4f       	sbci	r25, 0xFF	; 255
 4ea:	6a e0       	ldi	r22, 0x0A	; 10
 4ec:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <UART_WriteBytes>
	while(!UART_TxBufferEmpty()) { }
 4f0:	00 00       	nop
 4f2:	0e 94 bb 04 	call	0x976	; 0x976 <UART_TxBufferEmpty>
 4f6:	88 23       	and	r24, r24
 4f8:	e1 f3       	breq	.-8      	; 0x4f2 <tx_rmc+0x394>

}
 4fa:	c9 57       	subi	r28, 0x79	; 121
 4fc:	df 4f       	sbci	r29, 0xFF	; 255
 4fe:	0f b6       	in	r0, 0x3f	; 63
 500:	f8 94       	cli
 502:	de bf       	out	0x3e, r29	; 62
 504:	0f be       	out	0x3f, r0	; 63
 506:	cd bf       	out	0x3d, r28	; 61
 508:	cf 91       	pop	r28
 50a:	df 91       	pop	r29
 50c:	08 95       	ret

0000050e <IsEqual>:

/*
 * @brief returns 0 if the two utc times are not equal, else 1
 */
uint8_t IsEqual(uint8_t *o, uint8_t *n) {
 50e:	df 93       	push	r29
 510:	cf 93       	push	r28
 512:	00 d0       	rcall	.+0      	; 0x514 <IsEqual+0x6>
 514:	00 d0       	rcall	.+0      	; 0x516 <IsEqual+0x8>
 516:	0f 92       	push	r0
 518:	cd b7       	in	r28, 0x3d	; 61
 51a:	de b7       	in	r29, 0x3e	; 62
 51c:	9b 83       	std	Y+3, r25	; 0x03
 51e:	8a 83       	std	Y+2, r24	; 0x02
 520:	7d 83       	std	Y+5, r23	; 0x05
 522:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t i=0;
 524:	19 82       	std	Y+1, r1	; 0x01
	for(; i<10; i++) {
 526:	19 c0       	rjmp	.+50     	; 0x55a <IsEqual+0x4c>
		if(o[i] != n[i]) return 0;
 528:	89 81       	ldd	r24, Y+1	; 0x01
 52a:	88 2f       	mov	r24, r24
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	2a 81       	ldd	r18, Y+2	; 0x02
 530:	3b 81       	ldd	r19, Y+3	; 0x03
 532:	82 0f       	add	r24, r18
 534:	93 1f       	adc	r25, r19
 536:	fc 01       	movw	r30, r24
 538:	40 81       	ld	r20, Z
 53a:	89 81       	ldd	r24, Y+1	; 0x01
 53c:	88 2f       	mov	r24, r24
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	2c 81       	ldd	r18, Y+4	; 0x04
 542:	3d 81       	ldd	r19, Y+5	; 0x05
 544:	82 0f       	add	r24, r18
 546:	93 1f       	adc	r25, r19
 548:	fc 01       	movw	r30, r24
 54a:	80 81       	ld	r24, Z
 54c:	48 17       	cp	r20, r24
 54e:	11 f0       	breq	.+4      	; 0x554 <IsEqual+0x46>
 550:	80 e0       	ldi	r24, 0x00	; 0
 552:	07 c0       	rjmp	.+14     	; 0x562 <IsEqual+0x54>
/*
 * @brief returns 0 if the two utc times are not equal, else 1
 */
uint8_t IsEqual(uint8_t *o, uint8_t *n) {
	uint8_t i=0;
	for(; i<10; i++) {
 554:	89 81       	ldd	r24, Y+1	; 0x01
 556:	8f 5f       	subi	r24, 0xFF	; 255
 558:	89 83       	std	Y+1, r24	; 0x01
 55a:	89 81       	ldd	r24, Y+1	; 0x01
 55c:	8a 30       	cpi	r24, 0x0A	; 10
 55e:	20 f3       	brcs	.-56     	; 0x528 <IsEqual+0x1a>
		if(o[i] != n[i]) return 0;
	}
	return 1;
 560:	81 e0       	ldi	r24, 0x01	; 1
}
 562:	0f 90       	pop	r0
 564:	0f 90       	pop	r0
 566:	0f 90       	pop	r0
 568:	0f 90       	pop	r0
 56a:	0f 90       	pop	r0
 56c:	cf 91       	pop	r28
 56e:	df 91       	pop	r29
 570:	08 95       	ret

00000572 <SoftUART_Init>:
static volatile uint8_t RX_N = 0;

/*
 * @brief initialization of the software uart
 */
void SoftUART_Init() {
 572:	df 93       	push	r29
 574:	cf 93       	push	r28
 576:	cd b7       	in	r28, 0x3d	; 61
 578:	de b7       	in	r29, 0x3e	; 62
	UART_PORT |=  (1<<TX_PIN); // set TX Pin to idle value
 57a:	8b e2       	ldi	r24, 0x2B	; 43
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	2b e2       	ldi	r18, 0x2B	; 43
 580:	30 e0       	ldi	r19, 0x00	; 0
 582:	f9 01       	movw	r30, r18
 584:	20 81       	ld	r18, Z
 586:	24 60       	ori	r18, 0x04	; 4
 588:	fc 01       	movw	r30, r24
 58a:	20 83       	st	Z, r18
	UART_PORT |=  (1<<RX_PIN); // PullUp for RX
 58c:	8b e2       	ldi	r24, 0x2B	; 43
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	2b e2       	ldi	r18, 0x2B	; 43
 592:	30 e0       	ldi	r19, 0x00	; 0
 594:	f9 01       	movw	r30, r18
 596:	20 81       	ld	r18, Z
 598:	28 60       	ori	r18, 0x08	; 8
 59a:	fc 01       	movw	r30, r24
 59c:	20 83       	st	Z, r18
	UART_DIR  |=  (1<<TX_PIN); // set TX Pin to output
 59e:	8a e2       	ldi	r24, 0x2A	; 42
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	2a e2       	ldi	r18, 0x2A	; 42
 5a4:	30 e0       	ldi	r19, 0x00	; 0
 5a6:	f9 01       	movw	r30, r18
 5a8:	20 81       	ld	r18, Z
 5aa:	24 60       	ori	r18, 0x04	; 4
 5ac:	fc 01       	movw	r30, r24
 5ae:	20 83       	st	Z, r18
	UART_DIR  &= ~(1<<RX_PIN); // set RX Pin to input
 5b0:	8a e2       	ldi	r24, 0x2A	; 42
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	2a e2       	ldi	r18, 0x2A	; 42
 5b6:	30 e0       	ldi	r19, 0x00	; 0
 5b8:	f9 01       	movw	r30, r18
 5ba:	20 81       	ld	r18, Z
 5bc:	27 7f       	andi	r18, 0xF7	; 247
 5be:	fc 01       	movw	r30, r24
 5c0:	20 83       	st	Z, r18

	EICRA |= (1<<ISC11);	   // since RX is on INT1 Pin we activate 
 5c2:	89 e6       	ldi	r24, 0x69	; 105
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	29 e6       	ldi	r18, 0x69	; 105
 5c8:	30 e0       	ldi	r19, 0x00	; 0
 5ca:	f9 01       	movw	r30, r18
 5cc:	20 81       	ld	r18, Z
 5ce:	28 60       	ori	r18, 0x08	; 8
 5d0:	fc 01       	movw	r30, r24
 5d2:	20 83       	st	Z, r18
	// interrupts if the value changes from 1 to 0 (start condition)
	EIMSK |= (1<<INT1);		   // enable interrupt for RX Pin
 5d4:	8d e3       	ldi	r24, 0x3D	; 61
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	2d e3       	ldi	r18, 0x3D	; 61
 5da:	30 e0       	ldi	r19, 0x00	; 0
 5dc:	f9 01       	movw	r30, r18
 5de:	20 81       	ld	r18, Z
 5e0:	22 60       	ori	r18, 0x02	; 2
 5e2:	fc 01       	movw	r30, r24
 5e4:	20 83       	st	Z, r18
	sys.flag.SoftUART_Rx = 0;  // no data received so far
 5e6:	80 91 18 02 	lds	r24, 0x0218
 5ea:	8d 7f       	andi	r24, 0xFD	; 253
 5ec:	80 93 18 02 	sts	0x0218, r24
}
 5f0:	cf 91       	pop	r28
 5f2:	df 91       	pop	r29
 5f4:	08 95       	ret

000005f6 <SoftUART_GetByte>:

/*
 * @brief get a byte from the ringbuffer
 */
uint8_t SoftUART_GetByte() {
 5f6:	df 93       	push	r29
 5f8:	cf 93       	push	r28
 5fa:	cd b7       	in	r28, 0x3d	; 61
 5fc:	de b7       	in	r29, 0x3e	; 62
	return GetFromRxBuffer();
 5fe:	0e 94 58 04 	call	0x8b0	; 0x8b0 <GetFromRxBuffer>
}
 602:	cf 91       	pop	r28
 604:	df 91       	pop	r29
 606:	08 95       	ret

00000608 <SoftUART_RxBufferEmpty>:

/*
 * @brief returns 1 if buffer is empty, 0 otherwise
 */
uint8_t SoftUART_RxBufferEmpty() {
 608:	df 93       	push	r29
 60a:	cf 93       	push	r28
 60c:	cd b7       	in	r28, 0x3d	; 61
 60e:	de b7       	in	r29, 0x3e	; 62
	if(RX_N == 0) return 1;
 610:	80 91 b9 01 	lds	r24, 0x01B9
 614:	88 23       	and	r24, r24
 616:	11 f4       	brne	.+4      	; 0x61c <SoftUART_RxBufferEmpty+0x14>
 618:	81 e0       	ldi	r24, 0x01	; 1
 61a:	01 c0       	rjmp	.+2      	; 0x61e <SoftUART_RxBufferEmpty+0x16>
	else          return 0;
 61c:	80 e0       	ldi	r24, 0x00	; 0
}
 61e:	cf 91       	pop	r28
 620:	df 91       	pop	r29
 622:	08 95       	ret

00000624 <__vector_2>:


/*
 * @brief ISR for the RX pin
 */
ISR(INT1_vect) {
 624:	1f 92       	push	r1
 626:	0f 92       	push	r0
 628:	0f b6       	in	r0, 0x3f	; 63
 62a:	0f 92       	push	r0
 62c:	11 24       	eor	r1, r1
 62e:	2f 93       	push	r18
 630:	3f 93       	push	r19
 632:	4f 93       	push	r20
 634:	5f 93       	push	r21
 636:	6f 93       	push	r22
 638:	7f 93       	push	r23
 63a:	8f 93       	push	r24
 63c:	9f 93       	push	r25
 63e:	af 93       	push	r26
 640:	bf 93       	push	r27
 642:	ef 93       	push	r30
 644:	ff 93       	push	r31
 646:	df 93       	push	r29
 648:	cf 93       	push	r28
 64a:	cd b7       	in	r28, 0x3d	; 61
 64c:	de b7       	in	r29, 0x3e	; 62
	// start bit received, start timer 2 for decoding the message
	if(softUART_RX_State == IDLE) {
 64e:	80 91 34 01 	lds	r24, 0x0134
 652:	88 23       	and	r24, r24
 654:	71 f4       	brne	.+28     	; 0x672 <__vector_2+0x4e>
		softUART_RX_State = START;
 656:	81 e0       	ldi	r24, 0x01	; 1
 658:	80 93 34 01 	sts	0x0134, r24
		EIMSK &= ~(1<<INT1); // disable interrupts for RX pin
 65c:	8d e3       	ldi	r24, 0x3D	; 61
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	2d e3       	ldi	r18, 0x3D	; 61
 662:	30 e0       	ldi	r19, 0x00	; 0
 664:	f9 01       	movw	r30, r18
 666:	20 81       	ld	r18, Z
 668:	2d 7f       	andi	r18, 0xFD	; 253
 66a:	fc 01       	movw	r30, r24
 66c:	20 83       	st	Z, r18
		timer2_start(); // start the reading timer
 66e:	0e 94 4c 03 	call	0x698	; 0x698 <timer2_start>
	}	
}
 672:	cf 91       	pop	r28
 674:	df 91       	pop	r29
 676:	ff 91       	pop	r31
 678:	ef 91       	pop	r30
 67a:	bf 91       	pop	r27
 67c:	af 91       	pop	r26
 67e:	9f 91       	pop	r25
 680:	8f 91       	pop	r24
 682:	7f 91       	pop	r23
 684:	6f 91       	pop	r22
 686:	5f 91       	pop	r21
 688:	4f 91       	pop	r20
 68a:	3f 91       	pop	r19
 68c:	2f 91       	pop	r18
 68e:	0f 90       	pop	r0
 690:	0f be       	out	0x3f, r0	; 63
 692:	0f 90       	pop	r0
 694:	1f 90       	pop	r1
 696:	18 95       	reti

00000698 <timer2_start>:

/*
 * @brief start timer 2
 */
void timer2_start() {
 698:	df 93       	push	r29
 69a:	cf 93       	push	r28
 69c:	cd b7       	in	r28, 0x3d	; 61
 69e:	de b7       	in	r29, 0x3e	; 62
	// Prescaler = 32
	// Baudrate = 4800 Baud
	// Time pro Bit = 208.33333 us
	// TCNT2 Reload Value in first to get an offset of half a bit is
	// therefor 255 - 208 / (2*2) for sample
	TCNT2   = (255 - (208/4));
 6a0:	82 eb       	ldi	r24, 0xB2	; 178
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	2b ec       	ldi	r18, 0xCB	; 203
 6a6:	fc 01       	movw	r30, r24
 6a8:	20 83       	st	Z, r18
	// enable prescaler
	TCCR2B = (1<<CS21) | (1<<CS20);
 6aa:	81 eb       	ldi	r24, 0xB1	; 177
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	23 e0       	ldi	r18, 0x03	; 3
 6b0:	fc 01       	movw	r30, r24
 6b2:	20 83       	st	Z, r18
	// enable timer 2 overflow interrupt
	TIMSK2 |= (1<<TOIE2);
 6b4:	80 e7       	ldi	r24, 0x70	; 112
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	20 e7       	ldi	r18, 0x70	; 112
 6ba:	30 e0       	ldi	r19, 0x00	; 0
 6bc:	f9 01       	movw	r30, r18
 6be:	20 81       	ld	r18, Z
 6c0:	21 60       	ori	r18, 0x01	; 1
 6c2:	fc 01       	movw	r30, r24
 6c4:	20 83       	st	Z, r18
}
 6c6:	cf 91       	pop	r28
 6c8:	df 91       	pop	r29
 6ca:	08 95       	ret

000006cc <timer2_stop>:

/*
 * @brief stop timer 2
 */
void timer2_stop() {
 6cc:	df 93       	push	r29
 6ce:	cf 93       	push	r28
 6d0:	cd b7       	in	r28, 0x3d	; 61
 6d2:	de b7       	in	r29, 0x3e	; 62
	// disable prescaler
	TCCR2B &= ~((1<<CS22) | (1<<CS21) | (1<<CS20));
 6d4:	81 eb       	ldi	r24, 0xB1	; 177
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	21 eb       	ldi	r18, 0xB1	; 177
 6da:	30 e0       	ldi	r19, 0x00	; 0
 6dc:	f9 01       	movw	r30, r18
 6de:	20 81       	ld	r18, Z
 6e0:	28 7f       	andi	r18, 0xF8	; 248
 6e2:	fc 01       	movw	r30, r24
 6e4:	20 83       	st	Z, r18
	// enable timer 2 overflow interrupt
	TIMSK2 &= ~(1<<TOIE2);
 6e6:	80 e7       	ldi	r24, 0x70	; 112
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	20 e7       	ldi	r18, 0x70	; 112
 6ec:	30 e0       	ldi	r19, 0x00	; 0
 6ee:	f9 01       	movw	r30, r18
 6f0:	20 81       	ld	r18, Z
 6f2:	2e 7f       	andi	r18, 0xFE	; 254
 6f4:	fc 01       	movw	r30, r24
 6f6:	20 83       	st	Z, r18
}
 6f8:	cf 91       	pop	r28
 6fa:	df 91       	pop	r29
 6fc:	08 95       	ret

000006fe <__vector_9>:

/*
 * @brief ISR for timer 2 overflow
 */
ISR(TIMER2_OVF_vect) {
 6fe:	1f 92       	push	r1
 700:	0f 92       	push	r0
 702:	0f b6       	in	r0, 0x3f	; 63
 704:	0f 92       	push	r0
 706:	11 24       	eor	r1, r1
 708:	2f 93       	push	r18
 70a:	3f 93       	push	r19
 70c:	4f 93       	push	r20
 70e:	5f 93       	push	r21
 710:	6f 93       	push	r22
 712:	7f 93       	push	r23
 714:	8f 93       	push	r24
 716:	9f 93       	push	r25
 718:	af 93       	push	r26
 71a:	bf 93       	push	r27
 71c:	ef 93       	push	r30
 71e:	ff 93       	push	r31
 720:	df 93       	push	r29
 722:	cf 93       	push	r28
 724:	0f 92       	push	r0
 726:	cd b7       	in	r28, 0x3d	; 61
 728:	de b7       	in	r29, 0x3e	; 62
	TCNT2 = (255 - (208/2));
 72a:	82 eb       	ldi	r24, 0xB2	; 178
 72c:	90 e0       	ldi	r25, 0x00	; 0
 72e:	27 e9       	ldi	r18, 0x97	; 151
 730:	fc 01       	movw	r30, r24
 732:	20 83       	st	Z, r18

	switch(softUART_RX_State) {
 734:	80 91 34 01 	lds	r24, 0x0134
 738:	88 2f       	mov	r24, r24
 73a:	90 e0       	ldi	r25, 0x00	; 0
 73c:	81 30       	cpi	r24, 0x01	; 1
 73e:	91 05       	cpc	r25, r1
 740:	79 f0       	breq	.+30     	; 0x760 <__vector_9+0x62>
 742:	82 30       	cpi	r24, 0x02	; 2
 744:	91 05       	cpc	r25, r1
 746:	24 f4       	brge	.+8      	; 0x750 <__vector_9+0x52>
 748:	00 97       	sbiw	r24, 0x00	; 0
 74a:	09 f4       	brne	.+2      	; 0x74e <__vector_9+0x50>
 74c:	64 c0       	rjmp	.+200    	; 0x816 <__vector_9+0x118>
 74e:	5f c0       	rjmp	.+190    	; 0x80e <__vector_9+0x110>
 750:	82 30       	cpi	r24, 0x02	; 2
 752:	91 05       	cpc	r25, r1
 754:	69 f0       	breq	.+26     	; 0x770 <__vector_9+0x72>
 756:	83 30       	cpi	r24, 0x03	; 3
 758:	91 05       	cpc	r25, r1
 75a:	09 f4       	brne	.+2      	; 0x75e <__vector_9+0x60>
 75c:	41 c0       	rjmp	.+130    	; 0x7e0 <__vector_9+0xe2>
 75e:	57 c0       	rjmp	.+174    	; 0x80e <__vector_9+0x110>
		case IDLE: 
		break;
		case START: {
						softUART_RX_State  = BIT;
 760:	82 e0       	ldi	r24, 0x02	; 2
 762:	80 93 34 01 	sts	0x0134, r24
						softUART_RX_BitCnt = 0;
 766:	10 92 35 01 	sts	0x0135, r1
						softUART_RX_Data   = 0x00;
 76a:	10 92 36 01 	sts	0x0136, r1
					}
		break;
 76e:	56 c0       	rjmp	.+172    	; 0x81c <__vector_9+0x11e>
		case BIT:	{
						// read pin value and store it accordingly
						uint8_t rxPin = 0;
 770:	19 82       	std	Y+1, r1	; 0x01
						if(UART_PIN & (1<<RX_PIN)) { rxPin = 1; }
 772:	89 e2       	ldi	r24, 0x29	; 41
 774:	90 e0       	ldi	r25, 0x00	; 0
 776:	fc 01       	movw	r30, r24
 778:	80 81       	ld	r24, Z
 77a:	88 2f       	mov	r24, r24
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	88 70       	andi	r24, 0x08	; 8
 780:	90 70       	andi	r25, 0x00	; 0
 782:	00 97       	sbiw	r24, 0x00	; 0
 784:	19 f0       	breq	.+6      	; 0x78c <__vector_9+0x8e>
 786:	81 e0       	ldi	r24, 0x01	; 1
 788:	89 83       	std	Y+1, r24	; 0x01
 78a:	01 c0       	rjmp	.+2      	; 0x78e <__vector_9+0x90>
						else                       { rxPin = 0; }
 78c:	19 82       	std	Y+1, r1	; 0x01
						softUART_RX_Data +=  (rxPin << softUART_RX_BitCnt);
 78e:	89 81       	ldd	r24, Y+1	; 0x01
 790:	88 2f       	mov	r24, r24
 792:	90 e0       	ldi	r25, 0x00	; 0
 794:	20 91 35 01 	lds	r18, 0x0135
 798:	22 2f       	mov	r18, r18
 79a:	30 e0       	ldi	r19, 0x00	; 0
 79c:	02 2e       	mov	r0, r18
 79e:	02 c0       	rjmp	.+4      	; 0x7a4 <__vector_9+0xa6>
 7a0:	88 0f       	add	r24, r24
 7a2:	99 1f       	adc	r25, r25
 7a4:	0a 94       	dec	r0
 7a6:	e2 f7       	brpl	.-8      	; 0x7a0 <__vector_9+0xa2>
 7a8:	98 2f       	mov	r25, r24
 7aa:	80 91 36 01 	lds	r24, 0x0136
 7ae:	89 0f       	add	r24, r25
 7b0:	80 93 36 01 	sts	0x0136, r24
						softUART_RX_BitCnt++;
 7b4:	80 91 35 01 	lds	r24, 0x0135
 7b8:	8f 5f       	subi	r24, 0xFF	; 255
 7ba:	80 93 35 01 	sts	0x0135, r24
						if(softUART_RX_BitCnt == 8) {
 7be:	80 91 35 01 	lds	r24, 0x0135
 7c2:	88 30       	cpi	r24, 0x08	; 8
 7c4:	51 f5       	brne	.+84     	; 0x81a <__vector_9+0x11c>
							softUART_RX_State = STOPP;
 7c6:	83 e0       	ldi	r24, 0x03	; 3
 7c8:	80 93 34 01 	sts	0x0134, r24
							PutToRxBuffer(softUART_RX_Data); // save data
 7cc:	80 91 36 01 	lds	r24, 0x0136
 7d0:	0e 94 36 04 	call	0x86c	; 0x86c <PutToRxBuffer>
							sys.flag.SoftUART_Rx = 1;  // data received
 7d4:	80 91 18 02 	lds	r24, 0x0218
 7d8:	82 60       	ori	r24, 0x02	; 2
 7da:	80 93 18 02 	sts	0x0218, r24
						}
					}
		break;
 7de:	1e c0       	rjmp	.+60     	; 0x81c <__vector_9+0x11e>
		case STOPP: {
						softUART_RX_State = IDLE;
 7e0:	10 92 34 01 	sts	0x0134, r1
						timer2_stop();
 7e4:	0e 94 66 03 	call	0x6cc	; 0x6cc <timer2_stop>
						EIFR  |= (1<<INTF1); // clear the eventually set interrupt flag by writing
 7e8:	8c e3       	ldi	r24, 0x3C	; 60
 7ea:	90 e0       	ldi	r25, 0x00	; 0
 7ec:	2c e3       	ldi	r18, 0x3C	; 60
 7ee:	30 e0       	ldi	r19, 0x00	; 0
 7f0:	f9 01       	movw	r30, r18
 7f2:	20 81       	ld	r18, Z
 7f4:	22 60       	ori	r18, 0x02	; 2
 7f6:	fc 01       	movw	r30, r24
 7f8:	20 83       	st	Z, r18
						// a logical one to it (see datasheet page 72)
						EIMSK |= (1<<INT1); // activate interrupts again
 7fa:	8d e3       	ldi	r24, 0x3D	; 61
 7fc:	90 e0       	ldi	r25, 0x00	; 0
 7fe:	2d e3       	ldi	r18, 0x3D	; 61
 800:	30 e0       	ldi	r19, 0x00	; 0
 802:	f9 01       	movw	r30, r18
 804:	20 81       	ld	r18, Z
 806:	22 60       	ori	r18, 0x02	; 2
 808:	fc 01       	movw	r30, r24
 80a:	20 83       	st	Z, r18
					}	
		break;		
 80c:	07 c0       	rjmp	.+14     	; 0x81c <__vector_9+0x11e>
		default: 	softUART_RX_State = IDLE;
 80e:	10 92 34 01 	sts	0x0134, r1
		break;		
 812:	00 00       	nop
 814:	03 c0       	rjmp	.+6      	; 0x81c <__vector_9+0x11e>
ISR(TIMER2_OVF_vect) {
	TCNT2 = (255 - (208/2));

	switch(softUART_RX_State) {
		case IDLE: 
		break;
 816:	00 00       	nop
 818:	01 c0       	rjmp	.+2      	; 0x81c <__vector_9+0x11e>
							softUART_RX_State = STOPP;
							PutToRxBuffer(softUART_RX_Data); // save data
							sys.flag.SoftUART_Rx = 1;  // data received
						}
					}
		break;
 81a:	00 00       	nop
					}	
		break;		
		default: 	softUART_RX_State = IDLE;
		break;		
	}
}
 81c:	0f 90       	pop	r0
 81e:	cf 91       	pop	r28
 820:	df 91       	pop	r29
 822:	ff 91       	pop	r31
 824:	ef 91       	pop	r30
 826:	bf 91       	pop	r27
 828:	af 91       	pop	r26
 82a:	9f 91       	pop	r25
 82c:	8f 91       	pop	r24
 82e:	7f 91       	pop	r23
 830:	6f 91       	pop	r22
 832:	5f 91       	pop	r21
 834:	4f 91       	pop	r20
 836:	3f 91       	pop	r19
 838:	2f 91       	pop	r18
 83a:	0f 90       	pop	r0
 83c:	0f be       	out	0x3f, r0	; 63
 83e:	0f 90       	pop	r0
 840:	1f 90       	pop	r1
 842:	18 95       	reti

00000844 <IncrPtr>:

/*
 * @brief increments pointers of the ringbuffer
 */
uint8_t IncrPtr(uint8_t ptr) {
 844:	df 93       	push	r29
 846:	cf 93       	push	r28
 848:	00 d0       	rcall	.+0      	; 0x84a <IncrPtr+0x6>
 84a:	cd b7       	in	r28, 0x3d	; 61
 84c:	de b7       	in	r29, 0x3e	; 62
 84e:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t tmp = ptr + 1;
 850:	8a 81       	ldd	r24, Y+2	; 0x02
 852:	8f 5f       	subi	r24, 0xFF	; 255
 854:	89 83       	std	Y+1, r24	; 0x01
	if(tmp == RX_SIZE) { return 0;   }
 856:	89 81       	ldd	r24, Y+1	; 0x01
 858:	80 38       	cpi	r24, 0x80	; 128
 85a:	11 f4       	brne	.+4      	; 0x860 <IncrPtr+0x1c>
 85c:	80 e0       	ldi	r24, 0x00	; 0
 85e:	01 c0       	rjmp	.+2      	; 0x862 <IncrPtr+0x1e>
	else 			   { return tmp; }
 860:	89 81       	ldd	r24, Y+1	; 0x01
}
 862:	0f 90       	pop	r0
 864:	0f 90       	pop	r0
 866:	cf 91       	pop	r28
 868:	df 91       	pop	r29
 86a:	08 95       	ret

0000086c <PutToRxBuffer>:

/*
 * @brief puts received element in the rx buffer
 */
void PutToRxBuffer(uint8_t val) {
 86c:	df 93       	push	r29
 86e:	cf 93       	push	r28
 870:	0f 92       	push	r0
 872:	cd b7       	in	r28, 0x3d	; 61
 874:	de b7       	in	r29, 0x3e	; 62
 876:	89 83       	std	Y+1, r24	; 0x01
  if(RX_N < RX_SIZE) {
 878:	80 91 b9 01 	lds	r24, 0x01B9
 87c:	88 23       	and	r24, r24
 87e:	a4 f0       	brlt	.+40     	; 0x8a8 <PutToRxBuffer+0x3c>
    RX_BUF[RX_Head] = val;
 880:	80 91 b7 01 	lds	r24, 0x01B7
 884:	88 2f       	mov	r24, r24
 886:	90 e0       	ldi	r25, 0x00	; 0
 888:	89 5c       	subi	r24, 0xC9	; 201
 88a:	9e 4f       	sbci	r25, 0xFE	; 254
 88c:	29 81       	ldd	r18, Y+1	; 0x01
 88e:	fc 01       	movw	r30, r24
 890:	20 83       	st	Z, r18
    RX_N++;
 892:	80 91 b9 01 	lds	r24, 0x01B9
 896:	8f 5f       	subi	r24, 0xFF	; 255
 898:	80 93 b9 01 	sts	0x01B9, r24
    RX_Head = IncrPtr(RX_Head);
 89c:	80 91 b7 01 	lds	r24, 0x01B7
 8a0:	0e 94 22 04 	call	0x844	; 0x844 <IncrPtr>
 8a4:	80 93 b7 01 	sts	0x01B7, r24
  }
}
 8a8:	0f 90       	pop	r0
 8aa:	cf 91       	pop	r28
 8ac:	df 91       	pop	r29
 8ae:	08 95       	ret

000008b0 <GetFromRxBuffer>:

/*
 * @brief gets a stored element from the receive buffer
 */
uint8_t GetFromRxBuffer() {
 8b0:	df 93       	push	r29
 8b2:	cf 93       	push	r28
 8b4:	0f 92       	push	r0
 8b6:	cd b7       	in	r28, 0x3d	; 61
 8b8:	de b7       	in	r29, 0x3e	; 62
 uint8_t tmp = 0;
 8ba:	19 82       	std	Y+1, r1	; 0x01
 if(RX_N > 0) {
 8bc:	80 91 b9 01 	lds	r24, 0x01B9
 8c0:	88 23       	and	r24, r24
 8c2:	a1 f0       	breq	.+40     	; 0x8ec <GetFromRxBuffer+0x3c>
	tmp = RX_BUF[RX_Tail];
 8c4:	80 91 b8 01 	lds	r24, 0x01B8
 8c8:	88 2f       	mov	r24, r24
 8ca:	90 e0       	ldi	r25, 0x00	; 0
 8cc:	89 5c       	subi	r24, 0xC9	; 201
 8ce:	9e 4f       	sbci	r25, 0xFE	; 254
 8d0:	fc 01       	movw	r30, r24
 8d2:	80 81       	ld	r24, Z
 8d4:	89 83       	std	Y+1, r24	; 0x01
	RX_Tail = IncrPtr(RX_Tail);
 8d6:	80 91 b8 01 	lds	r24, 0x01B8
 8da:	0e 94 22 04 	call	0x844	; 0x844 <IncrPtr>
 8de:	80 93 b8 01 	sts	0x01B8, r24
	RX_N--;
 8e2:	80 91 b9 01 	lds	r24, 0x01B9
 8e6:	81 50       	subi	r24, 0x01	; 1
 8e8:	80 93 b9 01 	sts	0x01B9, r24
 }
 return tmp;
 8ec:	89 81       	ldd	r24, Y+1	; 0x01
}
 8ee:	0f 90       	pop	r0
 8f0:	cf 91       	pop	r28
 8f2:	df 91       	pop	r29
 8f4:	08 95       	ret

000008f6 <UART_Init>:


/*
 * @brief initialization of the software uart
 */
void UART_Init(uint8_t baudrate) {
 8f6:	df 93       	push	r29
 8f8:	cf 93       	push	r28
 8fa:	0f 92       	push	r0
 8fc:	cd b7       	in	r28, 0x3d	; 61
 8fe:	de b7       	in	r29, 0x3e	; 62
 900:	89 83       	std	Y+1, r24	; 0x01
	UCSR0A |= (1<<U2X0);    // double read / write speed
 902:	80 ec       	ldi	r24, 0xC0	; 192
 904:	90 e0       	ldi	r25, 0x00	; 0
 906:	20 ec       	ldi	r18, 0xC0	; 192
 908:	30 e0       	ldi	r19, 0x00	; 0
 90a:	f9 01       	movw	r30, r18
 90c:	20 81       	ld	r18, Z
 90e:	22 60       	ori	r18, 0x02	; 2
 910:	fc 01       	movw	r30, r24
 912:	20 83       	st	Z, r18
	UCSR0B |= (1<<RXCIE0) | // enable the receive interrupt
 914:	81 ec       	ldi	r24, 0xC1	; 193
 916:	90 e0       	ldi	r25, 0x00	; 0
 918:	21 ec       	ldi	r18, 0xC1	; 193
 91a:	30 e0       	ldi	r19, 0x00	; 0
 91c:	f9 01       	movw	r30, r18
 91e:	20 81       	ld	r18, Z
 920:	28 69       	ori	r18, 0x98	; 152
 922:	fc 01       	movw	r30, r24
 924:	20 83       	st	Z, r18
              (1<<RXEN0)  | // enable receiver
			  (1<<TXEN0);   // enable transmitter
	UBRR0 = baudrate;
 926:	84 ec       	ldi	r24, 0xC4	; 196
 928:	90 e0       	ldi	r25, 0x00	; 0
 92a:	29 81       	ldd	r18, Y+1	; 0x01
 92c:	22 2f       	mov	r18, r18
 92e:	30 e0       	ldi	r19, 0x00	; 0
 930:	fc 01       	movw	r30, r24
 932:	31 83       	std	Z+1, r19	; 0x01
 934:	20 83       	st	Z, r18
	sys.flag.UART_Rx = 0;	// no data received so far
 936:	80 91 18 02 	lds	r24, 0x0218
 93a:	8e 7f       	andi	r24, 0xFE	; 254
 93c:	80 93 18 02 	sts	0x0218, r24
}
 940:	0f 90       	pop	r0
 942:	cf 91       	pop	r28
 944:	df 91       	pop	r29
 946:	08 95       	ret

00000948 <UART_GetByte>:

/*
 * @brief access date from the ring buffer
 */
uint8_t UART_GetByte() {
 948:	df 93       	push	r29
 94a:	cf 93       	push	r28
 94c:	cd b7       	in	r28, 0x3d	; 61
 94e:	de b7       	in	r29, 0x3e	; 62
	return HardGetFromRxBuffer();
 950:	0e 94 9e 05 	call	0xb3c	; 0xb3c <HardGetFromRxBuffer>
}
 954:	cf 91       	pop	r28
 956:	df 91       	pop	r29
 958:	08 95       	ret

0000095a <UART_RxBufferEmpty>:

/*
 * @brief returns 0 if buffer is empty, otherwise a number
 */
uint8_t UART_RxBufferEmpty() {
 95a:	df 93       	push	r29
 95c:	cf 93       	push	r28
 95e:	cd b7       	in	r28, 0x3d	; 61
 960:	de b7       	in	r29, 0x3e	; 62
	if(RX_N == 0) return 1;
 962:	80 91 cc 01 	lds	r24, 0x01CC
 966:	88 23       	and	r24, r24
 968:	11 f4       	brne	.+4      	; 0x96e <UART_RxBufferEmpty+0x14>
 96a:	81 e0       	ldi	r24, 0x01	; 1
 96c:	01 c0       	rjmp	.+2      	; 0x970 <UART_RxBufferEmpty+0x16>
	else          return 0;
 96e:	80 e0       	ldi	r24, 0x00	; 0
}
 970:	cf 91       	pop	r28
 972:	df 91       	pop	r29
 974:	08 95       	ret

00000976 <UART_TxBufferEmpty>:

/*
 * @brief returns 0 if buffer is empty, otherwise a number
 */
uint8_t UART_TxBufferEmpty() {
 976:	df 93       	push	r29
 978:	cf 93       	push	r28
 97a:	cd b7       	in	r28, 0x3d	; 61
 97c:	de b7       	in	r29, 0x3e	; 62
	if(TX_N == 0) return 1;
 97e:	80 91 df 01 	lds	r24, 0x01DF
 982:	88 23       	and	r24, r24
 984:	11 f4       	brne	.+4      	; 0x98a <UART_TxBufferEmpty+0x14>
 986:	81 e0       	ldi	r24, 0x01	; 1
 988:	01 c0       	rjmp	.+2      	; 0x98c <UART_TxBufferEmpty+0x16>
	else          return 0;
 98a:	80 e0       	ldi	r24, 0x00	; 0
}
 98c:	cf 91       	pop	r28
 98e:	df 91       	pop	r29
 990:	08 95       	ret

00000992 <__vector_18>:

/*
 * @brief interrupt service routine for receiving data
 */
ISR(USART_RX_vect) {
 992:	1f 92       	push	r1
 994:	0f 92       	push	r0
 996:	0f b6       	in	r0, 0x3f	; 63
 998:	0f 92       	push	r0
 99a:	11 24       	eor	r1, r1
 99c:	2f 93       	push	r18
 99e:	3f 93       	push	r19
 9a0:	4f 93       	push	r20
 9a2:	5f 93       	push	r21
 9a4:	6f 93       	push	r22
 9a6:	7f 93       	push	r23
 9a8:	8f 93       	push	r24
 9aa:	9f 93       	push	r25
 9ac:	af 93       	push	r26
 9ae:	bf 93       	push	r27
 9b0:	ef 93       	push	r30
 9b2:	ff 93       	push	r31
 9b4:	df 93       	push	r29
 9b6:	cf 93       	push	r28
 9b8:	cd b7       	in	r28, 0x3d	; 61
 9ba:	de b7       	in	r29, 0x3e	; 62
	HardPutToRxBuffer(UDR0);
 9bc:	86 ec       	ldi	r24, 0xC6	; 198
 9be:	90 e0       	ldi	r25, 0x00	; 0
 9c0:	fc 01       	movw	r30, r24
 9c2:	80 81       	ld	r24, Z
 9c4:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <HardPutToRxBuffer>
	sys.flag.UART_Rx = 1;	// data received
 9c8:	80 91 18 02 	lds	r24, 0x0218
 9cc:	81 60       	ori	r24, 0x01	; 1
 9ce:	80 93 18 02 	sts	0x0218, r24
}
 9d2:	cf 91       	pop	r28
 9d4:	df 91       	pop	r29
 9d6:	ff 91       	pop	r31
 9d8:	ef 91       	pop	r30
 9da:	bf 91       	pop	r27
 9dc:	af 91       	pop	r26
 9de:	9f 91       	pop	r25
 9e0:	8f 91       	pop	r24
 9e2:	7f 91       	pop	r23
 9e4:	6f 91       	pop	r22
 9e6:	5f 91       	pop	r21
 9e8:	4f 91       	pop	r20
 9ea:	3f 91       	pop	r19
 9ec:	2f 91       	pop	r18
 9ee:	0f 90       	pop	r0
 9f0:	0f be       	out	0x3f, r0	; 63
 9f2:	0f 90       	pop	r0
 9f4:	1f 90       	pop	r1
 9f6:	18 95       	reti

000009f8 <UART_WriteBytes>:

/*
 * @brief write an array of bytes in the ringbuffer for transmission
 */
void UART_WriteBytes(uint8_t *bytes, uint8_t size) {
 9f8:	df 93       	push	r29
 9fa:	cf 93       	push	r28
 9fc:	00 d0       	rcall	.+0      	; 0x9fe <UART_WriteBytes+0x6>
 9fe:	00 d0       	rcall	.+0      	; 0xa00 <UART_WriteBytes+0x8>
 a00:	cd b7       	in	r28, 0x3d	; 61
 a02:	de b7       	in	r29, 0x3e	; 62
 a04:	9b 83       	std	Y+3, r25	; 0x03
 a06:	8a 83       	std	Y+2, r24	; 0x02
 a08:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t i=0;
 a0a:	19 82       	std	Y+1, r1	; 0x01
	for(; i < size; i++) { HardPutToTxBuffer(bytes[i]); }
 a0c:	0e c0       	rjmp	.+28     	; 0xa2a <UART_WriteBytes+0x32>
 a0e:	89 81       	ldd	r24, Y+1	; 0x01
 a10:	88 2f       	mov	r24, r24
 a12:	90 e0       	ldi	r25, 0x00	; 0
 a14:	2a 81       	ldd	r18, Y+2	; 0x02
 a16:	3b 81       	ldd	r19, Y+3	; 0x03
 a18:	82 0f       	add	r24, r18
 a1a:	93 1f       	adc	r25, r19
 a1c:	fc 01       	movw	r30, r24
 a1e:	80 81       	ld	r24, Z
 a20:	0e 94 c1 05 	call	0xb82	; 0xb82 <HardPutToTxBuffer>
 a24:	89 81       	ldd	r24, Y+1	; 0x01
 a26:	8f 5f       	subi	r24, 0xFF	; 255
 a28:	89 83       	std	Y+1, r24	; 0x01
 a2a:	99 81       	ldd	r25, Y+1	; 0x01
 a2c:	8c 81       	ldd	r24, Y+4	; 0x04
 a2e:	98 17       	cp	r25, r24
 a30:	70 f3       	brcs	.-36     	; 0xa0e <UART_WriteBytes+0x16>
	UCSR0B |= (1<<UDRIE0); // enable transmission
 a32:	81 ec       	ldi	r24, 0xC1	; 193
 a34:	90 e0       	ldi	r25, 0x00	; 0
 a36:	21 ec       	ldi	r18, 0xC1	; 193
 a38:	30 e0       	ldi	r19, 0x00	; 0
 a3a:	f9 01       	movw	r30, r18
 a3c:	20 81       	ld	r18, Z
 a3e:	20 62       	ori	r18, 0x20	; 32
 a40:	fc 01       	movw	r30, r24
 a42:	20 83       	st	Z, r18
}
 a44:	0f 90       	pop	r0
 a46:	0f 90       	pop	r0
 a48:	0f 90       	pop	r0
 a4a:	0f 90       	pop	r0
 a4c:	cf 91       	pop	r28
 a4e:	df 91       	pop	r29
 a50:	08 95       	ret

00000a52 <__vector_19>:

/*
 * @brief interrupt service routine for transmitting data
 */
ISR(USART_UDRE_vect) {
 a52:	1f 92       	push	r1
 a54:	0f 92       	push	r0
 a56:	0f b6       	in	r0, 0x3f	; 63
 a58:	0f 92       	push	r0
 a5a:	11 24       	eor	r1, r1
 a5c:	2f 93       	push	r18
 a5e:	3f 93       	push	r19
 a60:	4f 93       	push	r20
 a62:	5f 93       	push	r21
 a64:	6f 93       	push	r22
 a66:	7f 93       	push	r23
 a68:	8f 93       	push	r24
 a6a:	9f 93       	push	r25
 a6c:	af 93       	push	r26
 a6e:	bf 93       	push	r27
 a70:	ef 93       	push	r30
 a72:	ff 93       	push	r31
 a74:	df 93       	push	r29
 a76:	cf 93       	push	r28
 a78:	0f 92       	push	r0
 a7a:	cd b7       	in	r28, 0x3d	; 61
 a7c:	de b7       	in	r29, 0x3e	; 62
	uint8_t data = HardGetFromTxBuffer();
 a7e:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <HardGetFromTxBuffer>
 a82:	89 83       	std	Y+1, r24	; 0x01
	UDR0 = data;
 a84:	86 ec       	ldi	r24, 0xC6	; 198
 a86:	90 e0       	ldi	r25, 0x00	; 0
 a88:	29 81       	ldd	r18, Y+1	; 0x01
 a8a:	fc 01       	movw	r30, r24
 a8c:	20 83       	st	Z, r18
	// disable interrupt if all data is transmitted
	if(TX_N == 0) { UCSR0B &= ~(1<<UDRIE0); } 
 a8e:	80 91 df 01 	lds	r24, 0x01DF
 a92:	88 23       	and	r24, r24
 a94:	49 f4       	brne	.+18     	; 0xaa8 <__vector_19+0x56>
 a96:	81 ec       	ldi	r24, 0xC1	; 193
 a98:	90 e0       	ldi	r25, 0x00	; 0
 a9a:	21 ec       	ldi	r18, 0xC1	; 193
 a9c:	30 e0       	ldi	r19, 0x00	; 0
 a9e:	f9 01       	movw	r30, r18
 aa0:	20 81       	ld	r18, Z
 aa2:	2f 7d       	andi	r18, 0xDF	; 223
 aa4:	fc 01       	movw	r30, r24
 aa6:	20 83       	st	Z, r18
}
 aa8:	0f 90       	pop	r0
 aaa:	cf 91       	pop	r28
 aac:	df 91       	pop	r29
 aae:	ff 91       	pop	r31
 ab0:	ef 91       	pop	r30
 ab2:	bf 91       	pop	r27
 ab4:	af 91       	pop	r26
 ab6:	9f 91       	pop	r25
 ab8:	8f 91       	pop	r24
 aba:	7f 91       	pop	r23
 abc:	6f 91       	pop	r22
 abe:	5f 91       	pop	r21
 ac0:	4f 91       	pop	r20
 ac2:	3f 91       	pop	r19
 ac4:	2f 91       	pop	r18
 ac6:	0f 90       	pop	r0
 ac8:	0f be       	out	0x3f, r0	; 63
 aca:	0f 90       	pop	r0
 acc:	1f 90       	pop	r1
 ace:	18 95       	reti

00000ad0 <HardIncrPtr>:

/*
 * @brief increments pointers of the ringbuffer
 */
uint8_t HardIncrPtr(uint8_t ptr) {
 ad0:	df 93       	push	r29
 ad2:	cf 93       	push	r28
 ad4:	00 d0       	rcall	.+0      	; 0xad6 <HardIncrPtr+0x6>
 ad6:	cd b7       	in	r28, 0x3d	; 61
 ad8:	de b7       	in	r29, 0x3e	; 62
 ada:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t tmp = ptr + 1;
 adc:	8a 81       	ldd	r24, Y+2	; 0x02
 ade:	8f 5f       	subi	r24, 0xFF	; 255
 ae0:	89 83       	std	Y+1, r24	; 0x01
	if(tmp == RX_SIZE) { return 0;   }
 ae2:	89 81       	ldd	r24, Y+1	; 0x01
 ae4:	80 31       	cpi	r24, 0x10	; 16
 ae6:	11 f4       	brne	.+4      	; 0xaec <HardIncrPtr+0x1c>
 ae8:	80 e0       	ldi	r24, 0x00	; 0
 aea:	01 c0       	rjmp	.+2      	; 0xaee <HardIncrPtr+0x1e>
	else 			   { return tmp; }
 aec:	89 81       	ldd	r24, Y+1	; 0x01
}
 aee:	0f 90       	pop	r0
 af0:	0f 90       	pop	r0
 af2:	cf 91       	pop	r28
 af4:	df 91       	pop	r29
 af6:	08 95       	ret

00000af8 <HardPutToRxBuffer>:

/*
 * @brief puts received element in the rx buffer
 */
void HardPutToRxBuffer(uint8_t val) {
 af8:	df 93       	push	r29
 afa:	cf 93       	push	r28
 afc:	0f 92       	push	r0
 afe:	cd b7       	in	r28, 0x3d	; 61
 b00:	de b7       	in	r29, 0x3e	; 62
 b02:	89 83       	std	Y+1, r24	; 0x01
  if(RX_N < RX_SIZE) {
 b04:	80 91 cc 01 	lds	r24, 0x01CC
 b08:	80 31       	cpi	r24, 0x10	; 16
 b0a:	a0 f4       	brcc	.+40     	; 0xb34 <HardPutToRxBuffer+0x3c>
    RX_BUF[RX_Head] = val;
 b0c:	80 91 ca 01 	lds	r24, 0x01CA
 b10:	88 2f       	mov	r24, r24
 b12:	90 e0       	ldi	r25, 0x00	; 0
 b14:	86 54       	subi	r24, 0x46	; 70
 b16:	9e 4f       	sbci	r25, 0xFE	; 254
 b18:	29 81       	ldd	r18, Y+1	; 0x01
 b1a:	fc 01       	movw	r30, r24
 b1c:	20 83       	st	Z, r18
    RX_N++;
 b1e:	80 91 cc 01 	lds	r24, 0x01CC
 b22:	8f 5f       	subi	r24, 0xFF	; 255
 b24:	80 93 cc 01 	sts	0x01CC, r24
    RX_Head = HardIncrPtr(RX_Head);
 b28:	80 91 ca 01 	lds	r24, 0x01CA
 b2c:	0e 94 68 05 	call	0xad0	; 0xad0 <HardIncrPtr>
 b30:	80 93 ca 01 	sts	0x01CA, r24
  }
}
 b34:	0f 90       	pop	r0
 b36:	cf 91       	pop	r28
 b38:	df 91       	pop	r29
 b3a:	08 95       	ret

00000b3c <HardGetFromRxBuffer>:

/*
 * @brief gets a stored element from the receive buffer
 */
uint8_t HardGetFromRxBuffer() {
 b3c:	df 93       	push	r29
 b3e:	cf 93       	push	r28
 b40:	0f 92       	push	r0
 b42:	cd b7       	in	r28, 0x3d	; 61
 b44:	de b7       	in	r29, 0x3e	; 62
 uint8_t tmp = 0;
 b46:	19 82       	std	Y+1, r1	; 0x01
 if(RX_N > 0) {
 b48:	80 91 cc 01 	lds	r24, 0x01CC
 b4c:	88 23       	and	r24, r24
 b4e:	a1 f0       	breq	.+40     	; 0xb78 <HardGetFromRxBuffer+0x3c>
	tmp = RX_BUF[RX_Tail];
 b50:	80 91 cb 01 	lds	r24, 0x01CB
 b54:	88 2f       	mov	r24, r24
 b56:	90 e0       	ldi	r25, 0x00	; 0
 b58:	86 54       	subi	r24, 0x46	; 70
 b5a:	9e 4f       	sbci	r25, 0xFE	; 254
 b5c:	fc 01       	movw	r30, r24
 b5e:	80 81       	ld	r24, Z
 b60:	89 83       	std	Y+1, r24	; 0x01
	RX_Tail = HardIncrPtr(RX_Tail);
 b62:	80 91 cb 01 	lds	r24, 0x01CB
 b66:	0e 94 68 05 	call	0xad0	; 0xad0 <HardIncrPtr>
 b6a:	80 93 cb 01 	sts	0x01CB, r24
	RX_N--;
 b6e:	80 91 cc 01 	lds	r24, 0x01CC
 b72:	81 50       	subi	r24, 0x01	; 1
 b74:	80 93 cc 01 	sts	0x01CC, r24
 }
 return tmp;
 b78:	89 81       	ldd	r24, Y+1	; 0x01
}
 b7a:	0f 90       	pop	r0
 b7c:	cf 91       	pop	r28
 b7e:	df 91       	pop	r29
 b80:	08 95       	ret

00000b82 <HardPutToTxBuffer>:

/*
 * @brief puts received element in the tx buffer
 */
void HardPutToTxBuffer(uint8_t val) {
 b82:	df 93       	push	r29
 b84:	cf 93       	push	r28
 b86:	0f 92       	push	r0
 b88:	cd b7       	in	r28, 0x3d	; 61
 b8a:	de b7       	in	r29, 0x3e	; 62
 b8c:	89 83       	std	Y+1, r24	; 0x01
  if(TX_N < TX_SIZE) {
 b8e:	80 91 df 01 	lds	r24, 0x01DF
    TX_BUF[TX_Head] = val;
 b92:	80 91 dd 01 	lds	r24, 0x01DD
 b96:	88 2f       	mov	r24, r24
 b98:	90 e0       	ldi	r25, 0x00	; 0
 b9a:	83 53       	subi	r24, 0x33	; 51
 b9c:	9e 4f       	sbci	r25, 0xFE	; 254
 b9e:	29 81       	ldd	r18, Y+1	; 0x01
 ba0:	fc 01       	movw	r30, r24
 ba2:	20 83       	st	Z, r18
    TX_N++;
 ba4:	80 91 df 01 	lds	r24, 0x01DF
 ba8:	8f 5f       	subi	r24, 0xFF	; 255
 baa:	80 93 df 01 	sts	0x01DF, r24
    TX_Head = HardIncrPtr(TX_Head);
 bae:	80 91 dd 01 	lds	r24, 0x01DD
 bb2:	0e 94 68 05 	call	0xad0	; 0xad0 <HardIncrPtr>
 bb6:	80 93 dd 01 	sts	0x01DD, r24
  }
}
 bba:	0f 90       	pop	r0
 bbc:	cf 91       	pop	r28
 bbe:	df 91       	pop	r29
 bc0:	08 95       	ret

00000bc2 <HardGetFromTxBuffer>:

/*
 * @brief gets a stored element from the transmit buffer
 */
uint8_t HardGetFromTxBuffer() {
 bc2:	df 93       	push	r29
 bc4:	cf 93       	push	r28
 bc6:	0f 92       	push	r0
 bc8:	cd b7       	in	r28, 0x3d	; 61
 bca:	de b7       	in	r29, 0x3e	; 62
 uint8_t tmp = 0;
 bcc:	19 82       	std	Y+1, r1	; 0x01
 if(TX_N > 0) {
 bce:	80 91 df 01 	lds	r24, 0x01DF
 bd2:	88 23       	and	r24, r24
 bd4:	a1 f0       	breq	.+40     	; 0xbfe <HardGetFromTxBuffer+0x3c>
	tmp = TX_BUF[TX_Tail];
 bd6:	80 91 de 01 	lds	r24, 0x01DE
 bda:	88 2f       	mov	r24, r24
 bdc:	90 e0       	ldi	r25, 0x00	; 0
 bde:	83 53       	subi	r24, 0x33	; 51
 be0:	9e 4f       	sbci	r25, 0xFE	; 254
 be2:	fc 01       	movw	r30, r24
 be4:	80 81       	ld	r24, Z
 be6:	89 83       	std	Y+1, r24	; 0x01
	TX_Tail = HardIncrPtr(TX_Tail);
 be8:	80 91 de 01 	lds	r24, 0x01DE
 bec:	0e 94 68 05 	call	0xad0	; 0xad0 <HardIncrPtr>
 bf0:	80 93 de 01 	sts	0x01DE, r24
	TX_N--;
 bf4:	80 91 df 01 	lds	r24, 0x01DF
 bf8:	81 50       	subi	r24, 0x01	; 1
 bfa:	80 93 df 01 	sts	0x01DF, r24
 }
 return tmp;
 bfe:	89 81       	ldd	r24, Y+1	; 0x01
}
 c00:	0f 90       	pop	r0
 c02:	cf 91       	pop	r28
 c04:	df 91       	pop	r29
 c06:	08 95       	ret

00000c08 <parse_data>:
static volatile rmc_s   rmc;

/*
 * @brief parses the data
 */
void parse_data(uint8_t data) {
 c08:	df 93       	push	r29
 c0a:	cf 93       	push	r28
 c0c:	0f 92       	push	r0
 c0e:	cd b7       	in	r28, 0x3d	; 61
 c10:	de b7       	in	r29, 0x3e	; 62
 c12:	89 83       	std	Y+1, r24	; 0x01
	if(data == '$') {
 c14:	89 81       	ldd	r24, Y+1	; 0x01
 c16:	84 32       	cpi	r24, 0x24	; 36
 c18:	11 f4       	brne	.+4      	; 0xc1e <parse_data+0x16>
		parse_state = SYNC;
 c1a:	10 92 e0 01 	sts	0x01E0, r1
	}
	
	switch(parse_state) {
 c1e:	80 91 e0 01 	lds	r24, 0x01E0
 c22:	88 2f       	mov	r24, r24
 c24:	90 e0       	ldi	r25, 0x00	; 0
 c26:	84 30       	cpi	r24, 0x04	; 4
 c28:	91 05       	cpc	r25, r1
 c2a:	81 f1       	breq	.+96     	; 0xc8c <parse_data+0x84>
 c2c:	85 30       	cpi	r24, 0x05	; 5
 c2e:	91 05       	cpc	r25, r1
 c30:	84 f4       	brge	.+32     	; 0xc52 <parse_data+0x4a>
 c32:	81 30       	cpi	r24, 0x01	; 1
 c34:	91 05       	cpc	r25, r1
 c36:	d9 f0       	breq	.+54     	; 0xc6e <parse_data+0x66>
 c38:	82 30       	cpi	r24, 0x02	; 2
 c3a:	91 05       	cpc	r25, r1
 c3c:	1c f4       	brge	.+6      	; 0xc44 <parse_data+0x3c>
 c3e:	00 97       	sbiw	r24, 0x00	; 0
 c40:	91 f0       	breq	.+36     	; 0xc66 <parse_data+0x5e>
		case GPRMC: {
			parse_rmc_data(data);
		}
		break;
		case ERROR: break;
		default:    break;
 c42:	46 c0       	rjmp	.+140    	; 0xcd0 <parse_data+0xc8>
void parse_data(uint8_t data) {
	if(data == '$') {
		parse_state = SYNC;
	}
	
	switch(parse_state) {
 c44:	82 30       	cpi	r24, 0x02	; 2
 c46:	91 05       	cpc	r25, r1
 c48:	b1 f0       	breq	.+44     	; 0xc76 <parse_data+0x6e>
 c4a:	83 30       	cpi	r24, 0x03	; 3
 c4c:	91 05       	cpc	r25, r1
 c4e:	b9 f0       	breq	.+46     	; 0xc7e <parse_data+0x76>
		case GPRMC: {
			parse_rmc_data(data);
		}
		break;
		case ERROR: break;
		default:    break;
 c50:	3f c0       	rjmp	.+126    	; 0xcd0 <parse_data+0xc8>
void parse_data(uint8_t data) {
	if(data == '$') {
		parse_state = SYNC;
	}
	
	switch(parse_state) {
 c52:	86 30       	cpi	r24, 0x06	; 6
 c54:	91 05       	cpc	r25, r1
 c56:	41 f1       	breq	.+80     	; 0xca8 <parse_data+0xa0>
 c58:	86 30       	cpi	r24, 0x06	; 6
 c5a:	91 05       	cpc	r25, r1
 c5c:	f4 f0       	brlt	.+60     	; 0xc9a <parse_data+0x92>
 c5e:	87 30       	cpi	r24, 0x07	; 7
 c60:	91 05       	cpc	r25, r1
 c62:	91 f1       	breq	.+100    	; 0xcc8 <parse_data+0xc0>
		break;
		case GPRMC: {
			parse_rmc_data(data);
		}
		break;
		case ERROR: break;
 c64:	35 c0       	rjmp	.+106    	; 0xcd0 <parse_data+0xc8>
	if(data == '$') {
		parse_state = SYNC;
	}
	
	switch(parse_state) {
		case SYNC: parse_state = DEVICE_ID_0;
 c66:	81 e0       	ldi	r24, 0x01	; 1
 c68:	80 93 e0 01 	sts	0x01E0, r24
		break;
 c6c:	31 c0       	rjmp	.+98     	; 0xcd0 <parse_data+0xc8>
		case DEVICE_ID_0: parse_state = DEVICE_ID_1;
 c6e:	82 e0       	ldi	r24, 0x02	; 2
 c70:	80 93 e0 01 	sts	0x01E0, r24
		break;
 c74:	2d c0       	rjmp	.+90     	; 0xcd0 <parse_data+0xc8>
		case DEVICE_ID_1: parse_state = MESS_ID_0;
 c76:	83 e0       	ldi	r24, 0x03	; 3
 c78:	80 93 e0 01 	sts	0x01E0, r24
		break;
 c7c:	29 c0       	rjmp	.+82     	; 0xcd0 <parse_data+0xc8>
		case MESS_ID_0: {
			parse_state = MESS_ID_1;
 c7e:	84 e0       	ldi	r24, 0x04	; 4
 c80:	80 93 e0 01 	sts	0x01E0, r24
		    prot[0] = data;
 c84:	89 81       	ldd	r24, Y+1	; 0x01
 c86:	80 93 e1 01 	sts	0x01E1, r24
		}            
		break;
 c8a:	22 c0       	rjmp	.+68     	; 0xcd0 <parse_data+0xc8>
		case MESS_ID_1: {
			parse_state = MESS_ID_2;
 c8c:	85 e0       	ldi	r24, 0x05	; 5
 c8e:	80 93 e0 01 	sts	0x01E0, r24
			prot[1] = data;
 c92:	89 81       	ldd	r24, Y+1	; 0x01
 c94:	80 93 e2 01 	sts	0x01E2, r24
		}
		break;
 c98:	1b c0       	rjmp	.+54     	; 0xcd0 <parse_data+0xc8>
		case MESS_ID_2: {
			parse_state = DECISION;
 c9a:	86 e0       	ldi	r24, 0x06	; 6
 c9c:	80 93 e0 01 	sts	0x01E0, r24
			prot[2] = data;
 ca0:	89 81       	ldd	r24, Y+1	; 0x01
 ca2:	80 93 e3 01 	sts	0x01E3, r24
		}
		break;
 ca6:	14 c0       	rjmp	.+40     	; 0xcd0 <parse_data+0xc8>
		case DECISION: {
			if(IsRMC()) { 
 ca8:	0e 94 17 07 	call	0xe2e	; 0xe2e <IsRMC>
 cac:	88 23       	and	r24, r24
 cae:	41 f0       	breq	.+16     	; 0xcc0 <parse_data+0xb8>
				parse_state = GPRMC;
 cb0:	87 e0       	ldi	r24, 0x07	; 7
 cb2:	80 93 e0 01 	sts	0x01E0, r24
				rmc_parse_state = RMC_UTC_TIME;
 cb6:	10 92 e4 01 	sts	0x01E4, r1
				rmc_data_cnt    = 0;
 cba:	10 92 e5 01 	sts	0x01E5, r1
			}
			else { 
				parse_state = ERROR;
			}
		}
		break;
 cbe:	08 c0       	rjmp	.+16     	; 0xcd0 <parse_data+0xc8>
				parse_state = GPRMC;
				rmc_parse_state = RMC_UTC_TIME;
				rmc_data_cnt    = 0;
			}
			else { 
				parse_state = ERROR;
 cc0:	88 e0       	ldi	r24, 0x08	; 8
 cc2:	80 93 e0 01 	sts	0x01E0, r24
			}
		}
		break;
 cc6:	04 c0       	rjmp	.+8      	; 0xcd0 <parse_data+0xc8>
		case GPRMC: {
			parse_rmc_data(data);
 cc8:	89 81       	ldd	r24, Y+1	; 0x01
 cca:	0e 94 87 06 	call	0xd0e	; 0xd0e <parse_rmc_data>
		}
		break;
 cce:	00 00       	nop
		case ERROR: break;
		default:    break;
	}
	
}
 cd0:	0f 90       	pop	r0
 cd2:	cf 91       	pop	r28
 cd4:	df 91       	pop	r29
 cd6:	08 95       	ret

00000cd8 <get_RMC_Data>:

/*
 * @brief copies the data in the struct of the caller
 */
void get_RMC_Data(rmc_s *data) {
 cd8:	df 93       	push	r29
 cda:	cf 93       	push	r28
 cdc:	00 d0       	rcall	.+0      	; 0xcde <get_RMC_Data+0x6>
 cde:	cd b7       	in	r28, 0x3d	; 61
 ce0:	de b7       	in	r29, 0x3e	; 62
 ce2:	9a 83       	std	Y+2, r25	; 0x02
 ce4:	89 83       	std	Y+1, r24	; 0x01
	*data = rmc;
 ce6:	89 81       	ldd	r24, Y+1	; 0x01
 ce8:	9a 81       	ldd	r25, Y+2	; 0x02
 cea:	26 ee       	ldi	r18, 0xE6	; 230
 cec:	31 e0       	ldi	r19, 0x01	; 1
 cee:	42 e3       	ldi	r20, 0x32	; 50
 cf0:	f9 01       	movw	r30, r18
 cf2:	00 80       	ld	r0, Z
 cf4:	2f 5f       	subi	r18, 0xFF	; 255
 cf6:	3f 4f       	sbci	r19, 0xFF	; 255
 cf8:	fc 01       	movw	r30, r24
 cfa:	00 82       	st	Z, r0
 cfc:	01 96       	adiw	r24, 0x01	; 1
 cfe:	41 50       	subi	r20, 0x01	; 1
 d00:	44 23       	and	r20, r20
 d02:	b1 f7       	brne	.-20     	; 0xcf0 <get_RMC_Data+0x18>
}
 d04:	0f 90       	pop	r0
 d06:	0f 90       	pop	r0
 d08:	cf 91       	pop	r28
 d0a:	df 91       	pop	r29
 d0c:	08 95       	ret

00000d0e <parse_rmc_data>:

/*
 * @brief parses rmc data
 */
void parse_rmc_data(uint8_t data) {
 d0e:	df 93       	push	r29
 d10:	cf 93       	push	r28
 d12:	0f 92       	push	r0
 d14:	cd b7       	in	r28, 0x3d	; 61
 d16:	de b7       	in	r29, 0x3e	; 62
 d18:	89 83       	std	Y+1, r24	; 0x01
	if(data == ',') { 
 d1a:	89 81       	ldd	r24, Y+1	; 0x01
 d1c:	8c 32       	cpi	r24, 0x2C	; 44
 d1e:	41 f4       	brne	.+16     	; 0xd30 <parse_rmc_data+0x22>
		rmc_data_cnt = 0;
 d20:	10 92 e5 01 	sts	0x01E5, r1
		rmc_parse_state++;
 d24:	80 91 e4 01 	lds	r24, 0x01E4
 d28:	8f 5f       	subi	r24, 0xFF	; 255
 d2a:	80 93 e4 01 	sts	0x01E4, r24
 d2e:	7b c0       	rjmp	.+246    	; 0xe26 <parse_rmc_data+0x118>
	}
	else {
		switch(rmc_parse_state) {
 d30:	80 91 e4 01 	lds	r24, 0x01E4
 d34:	88 2f       	mov	r24, r24
 d36:	90 e0       	ldi	r25, 0x00	; 0
 d38:	84 30       	cpi	r24, 0x04	; 4
 d3a:	91 05       	cpc	r25, r1
 d3c:	09 f4       	brne	.+2      	; 0xd40 <parse_rmc_data+0x32>
 d3e:	3d c0       	rjmp	.+122    	; 0xdba <parse_rmc_data+0xac>
 d40:	85 30       	cpi	r24, 0x05	; 5
 d42:	91 05       	cpc	r25, r1
 d44:	84 f4       	brge	.+32     	; 0xd66 <parse_rmc_data+0x58>
 d46:	81 30       	cpi	r24, 0x01	; 1
 d48:	91 05       	cpc	r25, r1
 d4a:	29 f1       	breq	.+74     	; 0xd96 <parse_rmc_data+0x88>
 d4c:	82 30       	cpi	r24, 0x02	; 2
 d4e:	91 05       	cpc	r25, r1
 d50:	1c f4       	brge	.+6      	; 0xd58 <parse_rmc_data+0x4a>
 d52:	00 97       	sbiw	r24, 0x00	; 0
 d54:	b1 f0       	breq	.+44     	; 0xd82 <parse_rmc_data+0x74>
			case RMC_LONGITUDE: 	rmc.longitude[rmc_data_cnt] = data; break;
			case RMC_E_W: 			rmc.e_w = data; break;
			case RMC_SPEED: 		rmc.speed[rmc_data_cnt] = data; break;
			case RMC_COURSE: 		rmc.course[rmc_data_cnt] = data; break;
			case RMC_CHECKSUM: 		rmc.cs[rmc_data_cnt] = data; sys.flag.RMC_RxDone = 1; break;
			default: break;
 d56:	62 c0       	rjmp	.+196    	; 0xe1c <parse_rmc_data+0x10e>
	if(data == ',') { 
		rmc_data_cnt = 0;
		rmc_parse_state++;
	}
	else {
		switch(rmc_parse_state) {
 d58:	82 30       	cpi	r24, 0x02	; 2
 d5a:	91 05       	cpc	r25, r1
 d5c:	01 f1       	breq	.+64     	; 0xd9e <parse_rmc_data+0x90>
 d5e:	83 30       	cpi	r24, 0x03	; 3
 d60:	91 05       	cpc	r25, r1
 d62:	39 f1       	breq	.+78     	; 0xdb2 <parse_rmc_data+0xa4>
			case RMC_LONGITUDE: 	rmc.longitude[rmc_data_cnt] = data; break;
			case RMC_E_W: 			rmc.e_w = data; break;
			case RMC_SPEED: 		rmc.speed[rmc_data_cnt] = data; break;
			case RMC_COURSE: 		rmc.course[rmc_data_cnt] = data; break;
			case RMC_CHECKSUM: 		rmc.cs[rmc_data_cnt] = data; sys.flag.RMC_RxDone = 1; break;
			default: break;
 d64:	5b c0       	rjmp	.+182    	; 0xe1c <parse_rmc_data+0x10e>
	if(data == ',') { 
		rmc_data_cnt = 0;
		rmc_parse_state++;
	}
	else {
		switch(rmc_parse_state) {
 d66:	86 30       	cpi	r24, 0x06	; 6
 d68:	91 05       	cpc	r25, r1
 d6a:	a9 f1       	breq	.+106    	; 0xdd6 <parse_rmc_data+0xc8>
 d6c:	86 30       	cpi	r24, 0x06	; 6
 d6e:	91 05       	cpc	r25, r1
 d70:	74 f1       	brlt	.+92     	; 0xdce <parse_rmc_data+0xc0>
 d72:	87 30       	cpi	r24, 0x07	; 7
 d74:	91 05       	cpc	r25, r1
 d76:	c9 f1       	breq	.+114    	; 0xdea <parse_rmc_data+0xdc>
 d78:	88 30       	cpi	r24, 0x08	; 8
 d7a:	91 05       	cpc	r25, r1
 d7c:	09 f4       	brne	.+2      	; 0xd80 <parse_rmc_data+0x72>
 d7e:	3f c0       	rjmp	.+126    	; 0xdfe <parse_rmc_data+0xf0>
			case RMC_LONGITUDE: 	rmc.longitude[rmc_data_cnt] = data; break;
			case RMC_E_W: 			rmc.e_w = data; break;
			case RMC_SPEED: 		rmc.speed[rmc_data_cnt] = data; break;
			case RMC_COURSE: 		rmc.course[rmc_data_cnt] = data; break;
			case RMC_CHECKSUM: 		rmc.cs[rmc_data_cnt] = data; sys.flag.RMC_RxDone = 1; break;
			default: break;
 d80:	4d c0       	rjmp	.+154    	; 0xe1c <parse_rmc_data+0x10e>
		rmc_data_cnt = 0;
		rmc_parse_state++;
	}
	else {
		switch(rmc_parse_state) {
			case RMC_UTC_TIME: 		rmc.utc_time[rmc_data_cnt] = data; break;
 d82:	80 91 e5 01 	lds	r24, 0x01E5
 d86:	88 2f       	mov	r24, r24
 d88:	90 e0       	ldi	r25, 0x00	; 0
 d8a:	8a 51       	subi	r24, 0x1A	; 26
 d8c:	9e 4f       	sbci	r25, 0xFE	; 254
 d8e:	29 81       	ldd	r18, Y+1	; 0x01
 d90:	fc 01       	movw	r30, r24
 d92:	20 83       	st	Z, r18
 d94:	43 c0       	rjmp	.+134    	; 0xe1c <parse_rmc_data+0x10e>
			case RMC_STATUS:		rmc.status = data; break;
 d96:	89 81       	ldd	r24, Y+1	; 0x01
 d98:	80 93 f0 01 	sts	0x01F0, r24
 d9c:	3f c0       	rjmp	.+126    	; 0xe1c <parse_rmc_data+0x10e>
			case RMC_LATITUDE: 		rmc.latitude[rmc_data_cnt] = data; break;
 d9e:	80 91 e5 01 	lds	r24, 0x01E5
 da2:	88 2f       	mov	r24, r24
 da4:	90 e0       	ldi	r25, 0x00	; 0
 da6:	8f 50       	subi	r24, 0x0F	; 15
 da8:	9e 4f       	sbci	r25, 0xFE	; 254
 daa:	29 81       	ldd	r18, Y+1	; 0x01
 dac:	fc 01       	movw	r30, r24
 dae:	20 83       	st	Z, r18
 db0:	35 c0       	rjmp	.+106    	; 0xe1c <parse_rmc_data+0x10e>
			case RMC_N_S: 			rmc.n_s = data; break;
 db2:	89 81       	ldd	r24, Y+1	; 0x01
 db4:	80 93 fa 01 	sts	0x01FA, r24
 db8:	31 c0       	rjmp	.+98     	; 0xe1c <parse_rmc_data+0x10e>
			case RMC_LONGITUDE: 	rmc.longitude[rmc_data_cnt] = data; break;
 dba:	80 91 e5 01 	lds	r24, 0x01E5
 dbe:	88 2f       	mov	r24, r24
 dc0:	90 e0       	ldi	r25, 0x00	; 0
 dc2:	85 50       	subi	r24, 0x05	; 5
 dc4:	9e 4f       	sbci	r25, 0xFE	; 254
 dc6:	29 81       	ldd	r18, Y+1	; 0x01
 dc8:	fc 01       	movw	r30, r24
 dca:	20 83       	st	Z, r18
 dcc:	27 c0       	rjmp	.+78     	; 0xe1c <parse_rmc_data+0x10e>
			case RMC_E_W: 			rmc.e_w = data; break;
 dce:	89 81       	ldd	r24, Y+1	; 0x01
 dd0:	80 93 04 02 	sts	0x0204, r24
 dd4:	23 c0       	rjmp	.+70     	; 0xe1c <parse_rmc_data+0x10e>
			case RMC_SPEED: 		rmc.speed[rmc_data_cnt] = data; break;
 dd6:	80 91 e5 01 	lds	r24, 0x01E5
 dda:	88 2f       	mov	r24, r24
 ddc:	90 e0       	ldi	r25, 0x00	; 0
 dde:	8b 5f       	subi	r24, 0xFB	; 251
 de0:	9d 4f       	sbci	r25, 0xFD	; 253
 de2:	29 81       	ldd	r18, Y+1	; 0x01
 de4:	fc 01       	movw	r30, r24
 de6:	20 83       	st	Z, r18
 de8:	19 c0       	rjmp	.+50     	; 0xe1c <parse_rmc_data+0x10e>
			case RMC_COURSE: 		rmc.course[rmc_data_cnt] = data; break;
 dea:	80 91 e5 01 	lds	r24, 0x01E5
 dee:	88 2f       	mov	r24, r24
 df0:	90 e0       	ldi	r25, 0x00	; 0
 df2:	87 5f       	subi	r24, 0xF7	; 247
 df4:	9d 4f       	sbci	r25, 0xFD	; 253
 df6:	29 81       	ldd	r18, Y+1	; 0x01
 df8:	fc 01       	movw	r30, r24
 dfa:	20 83       	st	Z, r18
 dfc:	0f c0       	rjmp	.+30     	; 0xe1c <parse_rmc_data+0x10e>
			case RMC_CHECKSUM: 		rmc.cs[rmc_data_cnt] = data; sys.flag.RMC_RxDone = 1; break;
 dfe:	80 91 e5 01 	lds	r24, 0x01E5
 e02:	88 2f       	mov	r24, r24
 e04:	90 e0       	ldi	r25, 0x00	; 0
 e06:	8b 5e       	subi	r24, 0xEB	; 235
 e08:	9d 4f       	sbci	r25, 0xFD	; 253
 e0a:	29 81       	ldd	r18, Y+1	; 0x01
 e0c:	fc 01       	movw	r30, r24
 e0e:	20 83       	st	Z, r18
 e10:	80 91 18 02 	lds	r24, 0x0218
 e14:	84 60       	ori	r24, 0x04	; 4
 e16:	80 93 18 02 	sts	0x0218, r24
 e1a:	00 00       	nop
			default: break;
		}
		rmc_data_cnt++;
 e1c:	80 91 e5 01 	lds	r24, 0x01E5
 e20:	8f 5f       	subi	r24, 0xFF	; 255
 e22:	80 93 e5 01 	sts	0x01E5, r24
	}
}
 e26:	0f 90       	pop	r0
 e28:	cf 91       	pop	r28
 e2a:	df 91       	pop	r29
 e2c:	08 95       	ret

00000e2e <IsRMC>:

/*
 * @brief returns 1 if protocol is RMC
 */
uint8_t IsRMC() {
 e2e:	df 93       	push	r29
 e30:	cf 93       	push	r28
 e32:	cd b7       	in	r28, 0x3d	; 61
 e34:	de b7       	in	r29, 0x3e	; 62
	if(prot[0] == 'R' &&
 e36:	80 91 e1 01 	lds	r24, 0x01E1
 e3a:	82 35       	cpi	r24, 0x52	; 82
 e3c:	51 f4       	brne	.+20     	; 0xe52 <IsRMC+0x24>
	   prot[1] == 'M' &&
 e3e:	80 91 e2 01 	lds	r24, 0x01E2

/*
 * @brief returns 1 if protocol is RMC
 */
uint8_t IsRMC() {
	if(prot[0] == 'R' &&
 e42:	8d 34       	cpi	r24, 0x4D	; 77
 e44:	31 f4       	brne	.+12     	; 0xe52 <IsRMC+0x24>
	   prot[1] == 'M' &&
	   prot[2] == 'C') {
 e46:	80 91 e3 01 	lds	r24, 0x01E3
/*
 * @brief returns 1 if protocol is RMC
 */
uint8_t IsRMC() {
	if(prot[0] == 'R' &&
	   prot[1] == 'M' &&
 e4a:	83 34       	cpi	r24, 0x43	; 67
 e4c:	11 f4       	brne	.+4      	; 0xe52 <IsRMC+0x24>
	   prot[2] == 'C') {
	   return 1;
 e4e:	81 e0       	ldi	r24, 0x01	; 1
 e50:	01 c0       	rjmp	.+2      	; 0xe54 <IsRMC+0x26>
	}
	else {
		return 0;
 e52:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 e54:	cf 91       	pop	r28
 e56:	df 91       	pop	r29
 e58:	08 95       	ret

00000e5a <_exit>:
 e5a:	f8 94       	cli

00000e5c <__stop_program>:
 e5c:	ff cf       	rjmp	.-2      	; 0xe5c <__stop_program>
